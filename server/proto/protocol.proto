syntax = "proto2";
package Krosbox;

// Proto extractor compiled unit - https://github.com/HearthSim/proto-extractor

import "common.proto";
import "collection.proto";
import "data.proto";

// ref: com.ankamagames.arena.protocol.AbilityIds
enum AbilityIds {
	CRITICAL_ABILITY = 3;
	ARMOR_ABILITY = 4;
	TACKLE_ABILITY = 5;
	DODGE_ABILITY = 6;
	TOUPITI_ABILITY = 7;
	SADIDAS_BLESSING_ABILITY = 9;
	COVER_FIRE_ABILITY = 10;
	FIRE_OF_RUBILAX_ABILITY = 11;
	HEROIC_INSPIRATION_ABILITY = 12;
	OLD_TIMER_ABILITY = 13;
	ELIACUBE_MASTER_ABILITY = 14;
	SHUSHUS_A_GOGO_ABILITY = 15;
	EARTH_RESISTANCE_ABILITY = 16;
	FIRE_RESISTANCE_ABILITY = 17;
	AIR_RESISTANCE_ABILITY = 18;
	WATER_RESISTANCE_ABILITY = 19;
	PUDDLAGE_ABILITY = 20;
	STICKY_SPRAY_CAN_ABILITY = 21;
	GOULTARMINATOR_ABILITY = 22;
	MASTER_KNIGHT_ABILITY = 23;
	SPEEDY_AURA_ABILITY = 24;
	INVISIBILITY_ABILITY = 25;
	MOTIVATION_ABILITY = 26;
	MADNESS_ABILITY = 27;
	CLAW_ATTACK = 28;
	DEMONIC_RANGE_ABILITY = 29;
	USURY_APPLYER_ABILITY = 30;
	KROSYMPA_ABILITY = 31;
	KROBALEZE_ABILITY = 32;
	INSENSITIVE_ABILITY = 33;
	PENDULUM_ABILITY = 35;
	ROLBAK_ABILITY = 36;
	MEGA_CHEAT_ABILITY = 37;
	KRALOVE_BLOOD_ABILITY = 38;
	CROW_BLOOD_ABILITY = 39;
	FIREFOUX_BLOOD_ABILITY = 40;
	TREECHNID_BLOOD_ABILITY = 41;
	SCARALEAF_BLOOD_ABILITY = 42;
	DARKNESS_BLOOD_ABILITY = 43;
	KERUBIM_TREASURES_ABILITY = 44;
	ELEMENTAL_IMMUNITY_ABILITY = 45;
	ECAFLIP_CHANCE_ABILITY = 46;
	TRAINING_ABILITY = 47;
	ELEMENTAL_RESISTANCE_ABILITY = 48;
	CRAFTER_ABILITY = 49;
	FARMER_ABILITY = 50;
	PROSPECTING_ABILITY = 51;
	NATURAL_DEFENSE_ABILITY = 52;
	CHANCE_ABILITY = 53;
	STRENGTH_ABILITY = 54;
	AGILITY_ABILITY = 55;
	INTELLIGENCE_ABILITY = 56;
	COMPULSION_ABILITY = 57;
	WISDOM_ABILITY = 58;
	STAIN_ABILITY = 59;
	WAKFU_RECYCLING = 60;
	SPELL_REBOUND_ABILITY = 61;
	REINFORCED_PROTECTION_ABILITY = 62;
	FECA_SHIELD_ABILITY = 63;
	DRACONIC_SUPPORT = 64;
	BUZZED_ABILITY = 65;
	GANG_LEADER = 66;
	PURPLE_CLAWS_PROTECTOR = 67;
	DYNAMO_ABILITY = 68;
	DRAGOON_PRANK_ABILITY = 69;
	WAKFIRE_ABILITY = 70;
	BIG_GAME_HUNTING = 71;
	FALSE_BROTHER_ABILITY = 72;
	ROYAL_TOFUTER_ABILTY = 73;
	ROYAL_GOBBALLER_ABILITY = 74;
	SACRED_BOOTY_ABILITY = 75;
	OCCULT_PILLAGE_ABILITY = 76;
	DECENDR_PRANKS = 77;
	IOPINISM = 78;
	INVETERATE_CHEATER = 79;
	BLACK_CROW_LAUGH = 80;
	KROSTYLE = 81;
	SOME_LIKE_IT_HOT = 82;
	CRITICAL_HEARTBREAK = 83;
	KATARSIK_LINK = 84;
	CRAVINGS = 85;
	WAKFORCE = 86;
	TOTAL_IOPINISM = 87;
	WILD_RANGE = 88;
	MOON_HAMMER = 89;
	BROODING = 90;
	BRETHREN_OF_THE_COAST = 91;
	TOTOR = 92;
	POTION_BAG = 93;
	BUBBLE = 94;
	SHADOW_OF_THE_JUNGLE_ABILITY = 95;
	HOIST_UP = 96;
	BORN_SPRINTER = 97;
	GOLDEN_PARACHUTE = 98;
	DRAGONSHIFTING = 99;
	CRIBBLING = 100;
	WAKSMART = 101;
	PUPUSH = 102;
	WATER_EXPLOSION_ABILITY = 10002;
	AIR_EXPLOSION_ABILITY = 10003;
	LETHAL_TRAP_EXPLOSION_ABILITY = 10004;
	FIRE_EXPLOSION_ABILITY = 10005;
	RECOVERY_ABILITY = 10009;
	COUNTER_ATTACK_ABILITY = 10010;
	PERFECT_BLOCK_ABILITY = 10011;
	UNTARGETABLE_ABILITY = 10012;
	LOOT_1_ABILITY = 10013;
	LOOT_2_ABILITY = 10014;
	LOOT_3_ABILITY = 10015;
	OBSTRUCTIVE_ABILITY = 10016;
	TRICKY_TRAP_EXPLOSION_ABILITY = 10017;
	BROTHERHOOD_OF_THE_TOFU_ABILITY = 10018;
	PURPLE_CLAWS_PROTECTOR_CHECKER_ABILITY = 10019;
	UNDER_PURPLE_CLAWS_PROTECTOR_EFFECT_ABILITY = 10020;
	TRAINING_CHECKER_ABILITY = 10021;
	SOILED_ABILITY = 10022;
	DECENDR_PRANKS_ACTIVATED = 10023;
	UNDER_FRAUD = 10024;
	UNBLOCKABLE = 10025;
	GHOUL_MARK = 10026;
	GHOUL_OWNER = 10027;
	UNDER_DINNERS_READY = 10028;
	USURY_ABILITY = 10029;
	ASSAULT_DISC = 10030;
	DISEMBOWELEMENT = 10031;
	SHADOW_OF_THE_JUNGLE_ACTIVATED = 10032;
	TURT_HELL = 10033;
	HERD_ABILITY = 20001;
	PINGWINDSURF_ABILITY = 20002;
	RIKTUS_TRIO_ABILITY = 20003;
	TOTEMIC_SLOW = 20004;
	TOTEMIC_HEALTH = 20005;
	TOTEMIC_SHIELD = 20006;
	TOTEMIC_DAMAGE = 20007;
	DARK_VLAD_BERZERK_ABILITY = 20008;
	CONTAMINATED_ABILITY = 20009;
	HERITAGE_DAMAGE_ABILITY = 20010;
	HERITAGE_SHIELD_ABILITY = 20011;
	HERITAGE_FAST_ABILITY = 20012;
	HERITAGE_HEALTH_ABILITY = 20013;
	TRANTROA_TEMPORISATION_ABILITY = 20014;
	TRANTROA_TEMPETE_ABILITY = 20015;
	GOUL_EXPLOSION_ABILITY = 20016;
	SEITH_SELF_PA_BUFF_ABILITY = 20017;
	VAMPYRO_INVULNERABILITY_ABILITY = 20018;
	XLII_FOURSEASONS_ABILITY = 20025;
	TRANTROA_CHESSLEVEL_ABILITY = 20026;
	CHEESLEVEL_SPECIALCELLS_ABILITY = 20027;
	TRANTROA_TEMPORISATION2_ABILITY = 20028;
}

// ref: com.ankamagames.arena.protocol.AchievementCategory
enum AchievementCategory {
	PVP_CAT = 1;
	COLLECTION_CAT = 2;
	PVE_CAT = 3;
}

// ref: com.ankamagames.arena.protocol.AchievementIds
enum AchievementIds {
	COLLECTION_RECYCLE_KROSMASTER = 1;
	COLLECTION_CRAFT_LEVEL_1 = 2;
	COLLECTION_CRAFT_LEVEL_2 = 3;
	COLLECTION_CRAFT_LEVEL_3 = 4;
	COLLECTION_CRAFT_LEVEL_4 = 5;
	COLLECTION_CRAFT_LEVEL_5 = 6;
	COLLECTION_CRAFT_LEVEL_6 = 7;
	COLLECTION_CRAFT_KROSMASTER = 8;
	COLLECTION_USE_CODE_FROM_PHYSIC = 9;
	PVP_RUN_RANKED_ON_TABLET = 10;
	PVP_RUN_CHALLENGE = 11;
	PVP_WIN_RANKED = 12;
	PVP_WIN_CONSECUTIVE = 13;
	PVP_REACH_LEVEL_TOURNAMENT = 14;
	PVP_WIN_TOURNAMENT = 15;
	PVP_REACH_RANK = 16;
	PVP_WIN_IOP = 17;
	PVP_WIN_SACRIEUR = 18;
	PVP_WIN_ECAFLIP = 19;
	PVP_WIN_CRA = 20;
	PVP_WIN_ROUBLARD = 21;
	PVP_WIN_SRAM = 22;
	PVP_WIN_XELOR = 23;
	PVP_WIN_ELIATROPE = 24;
	PVP_WIN_ENUTROF = 25;
	PVP_WIN_FECA = 26;
	PVP_WIN_STEAMER = 27;
	PVP_WIN_DREGGON = 28;
	PVP_WIN_BANDIT = 29;
	PVP_WIN_KNIGHT = 30;
	PVP_WIN_VIGILANTE = 31;
	PVP_WIN_PIWATE = 32;
	PVP_WIN_KANNIBALL = 33;
	PVP_WIN_BROTHERHOOD_OF_THE_TOFU = 34;
	PVP_WIN_MAP_ASTRUB = 35;
	PVP_WIN_MAP_MOON = 36;
	PVP_WIN_MAP_BRAKMAR = 37;
	PVP_WIN_MAP_FRIGOST = 38;
	PVP_WIN_MAP_KATREPAT = 39;
	PVP_WIN_MAP_XELORIUM = 40;
	PVP_PICK_KAMA = 41;
	PVE_END_TUTORIAL = 42;
	PVE_END_ASTRUB = 43;
	PVE_END_FRIGOST = 44;
	PVE_END_BRAKMAR = 45;
	PVE_END_MOON = 46;
	PVE_END_KATREPAT = 47;
	PVE_END_XELORIUM = 48;
	COLLECTION_OPEN_KROSBOX = 49;
	PVE_ALL_END_ASTRUB = 50;
	PVE_ALL_END_FRIGOST = 51;
	PVE_ALL_END_BRAKMAR = 52;
	PVE_ALL_END_MOON = 53;
	PVE_ALL_END_KATREPAT = 54;
	PVE_ALL_END_XELORIUM = 55;
	PVP_WIN_OSAMODAS = 56;
	PVP_WIN_PANDAWA = 57;
}

// ref: com.ankamagames.arena.protocol.ActionType
enum ActionType {
	TURN_START = 1;
	SPELL = 2;
	ABILITY = 3;
	FIGURE_ON_CRATE = 4;
	STRAIN_DIE = 5;
	DEMONIC_REWARD = 6;
	MOVEMENT_ACTION = 7;
	TACKLE_ACTION = 8;
	SPELL_COST_ACTION = 9;
	DEMONIC_REWARD_PURCHASE_ACTION = 10;
	GG_PURCHASE_ACTION = 11;
	KAMA_PICKUP_ACTION = 12;
	DAMAGE_ACTION = 13;
	MATCH_START = 14;
	MANIFESTATION_CHANGED = 15;
	OBJECTIVE_ACTION = 16;
	INJURIES_EXCHANGE = 17;
}

// ref: com.ankamagames.arena.protocol.AdditionnalSpellIds
enum AdditionnalSpellIds {
	USURY_APPLYER_SPELL = 10000;
	WATER_BOMB_EXPLOSION = 10001;
	GRENADO_EXPLOSION = 10002;
	FIREBOMB_EXPLOSION = 10003;
	DOLL_IRRITATION = 10004;
	DOLL_BOOM = 10005;
	COVER_FIRE_ACTIVATION_SPELL = 10008;
	COVER_FIRE_DESACTIVATION_SPELL = 10010;
	OLD_TIMER_ACTIVATION_SPELL = 10011;
	OLD_TIMER_DESACTIVATION_SPELL = 10012;
	FIRE_OF_RUBILAX_ACTIVATION_SPELL = 10013;
	FIRE_OF_RUBILAX_DESACTIVATION_SPELL = 10014;
	ELIACUBE_MASTER_SPELL = 10015;
	MOTIVATION_SPELL = 10016;
	SPEEDY_AURA_SPELL = 10017;
	MADNESS_ACTIVATION_SPELL = 10018;
	MADNESS_DESACTIVATION_SPELL = 10019;
	DEMONIC_RANGE_UPDATE_SPELL = 10020;
	DEMONIC_RANGE_DEACTIVATION_SPELL = 10021;
	SADIDAS_BLESSING_ACTIVATION_SPELL = 10028;
	SADIDAS_BLESSING_SPELL = 10029;
	HEROIC_INSPIRATION_ACTIVATION_SPELL = 10030;
	HEROIC_INSPIRATION_DESACTIVATION_SPELL = 10032;
	CLAW_ATTACK_SPELL = 10033;
	GOULTARMINATOR_SPELL = 10034;
	STICKY_SPRAY_CAN_ACTIVATION_SPELL = 10035;
	STICKY_SPRAY_CAN_DESACTIVATION_SPELL = 10036;
	LETHAL_TRAP_EXPLOSION_SPELL = 10037;
	MASTER_KNIGHT_SPELL = 10038;
	SHUSHUS_A_GOGO_ABILITY_SPELL = 10039;
	KROSYMPA_ACTIVATION_SPELL = 10042;
	KROSYMPA_DEACTIVATION_SPELL = 10043;
	WABBIT_HIT_SPELL = 10044;
	LOST_DOLL_HUG_SPELL = 10045;
	RECOVERY_ACTIVATION_SPELL = 10046;
	RECOVERY_DESACTIVATION_SPELL = 10047;
	COUNTER_ATTACK_SPELL = 10048;
	ROLBAK_SPELL = 10049;
	PENDULUM_SPELL = 10051;
	KRALOVE_BLOOD_ACTIVATION_SPELL = 10052;
	KRALOVE_BLOOD_DESACTIVATION_SPELL = 10053;
	CROW_BLOOD_ACTIVATION_SPELL = 10054;
	CROW_BLOOD_DESACTIVATION_SPELL = 10055;
	SCARALEAF_BLOOD_SPELL = 10056;
	FIREFOUX_BLOOD_ACTIVATION_SPELL = 10057;
	FIREFOUX_BLOOD_DESACTIVATION_SPELL = 10058;
	TREECHNID_BLOOD_ACTIVATION_SPELL = 10059;
	TREECHNID_BLOOD_DESACTIVATION_SPELL = 10060;
	DARKNESS_BLOOD_ACTIVATION_SPELL = 10061;
	DARKNESS_BLOOD_DESACTIVATION_SPELL = 10062;
	KERUBIM_TREASURES_SPELL = 10063;
	TRAINING_ACTIVATION_SPELL = 10064;
	PUNCH_SPELL = 10065;
	TRICKY_TRAP_CLICK_SPELL = 10066;
	CRACKSTONE_FATTY_BUM_BUM_SPELL = 10067;
	PRESPIC_MOCKERY_SPELL = 10068;
	PINK_DRAGOONE_BREAKING_WIND_SPELL = 10069;
	LIVING_SHOVEL_BARAKA_SPELL = 10070;
	HARPOONER_HARPOON_SPELL = 10071;
	TACTURRET_ATTRACTIC_SPELL = 10072;
	LIFESAVER_RESCUE_SPELL = 10073;
	FECA_SHIELD_ACTIVATION_SPELL = 10074;
	FECA_SHIELD_DEACTIVATION_SPELL = 10075;
	REINFORCED_PROTECTION_ACTIVATION_SPELL = 10076;
	REINFORCED_PROTECTION_DEACTIVATION_SPELL = 10077;
	COMPULSION_ACTIVATION_SPELL = 10078;
	PROSPECTING_SPELL = 10080;
	WISDOM_SPELL = 10081;
	SPELL_REBOUND_ACTIVATION_SPELL = 10083;
	SPELL_REBOUND_DEACTIVATION_SPELL = 10084;
	FARMER_SPELL = 10085;
	NATURAL_DEFENSE_ACTIVATION_SPELL = 10086;
	NATURAL_DEFENSE_DEACTIVATION_SPELL = 10087;
	LOOT_1_SPELL = 10088;
	LOOT_2_SPELL = 10089;
	LOOT_3_SPELL = 10090;
	DRACONIC_SUPPORT_ACTIVATION_SPELL = 10091;
	DRACONIC_SUPPORT_DEACTIVATION_SPELL = 10092;
	WAKFU_RECYCLING_SPELL = 10093;
	FALSE_BROTHER_ACTIVATION_SPELL = 10094;
	FALSE_BROTHER_DEACTIVATION_SPELL = 10095;
	BUZZED_ACTIVATION_SPELL = 10096;
	BUZZED_DEACTIVATION_SPELL = 10097;
	BIG_GAME_HUNTING_SPELL = 10098;
	DYNAMO_SPELL = 10099;
	DRAGOON_PRANK_ACTIVATION_SPELL = 10100;
	DRAGOON_PRANK_DEACTIVATION_SPELL = 10101;
	PURPLE_CLAWS_PROTECTOR_ACTIVATION_SPELL = 10102;
	PURPLE_CLAWS_PROTECTOR_CHECKER_ACTIVATION_SPELL = 10103;
	WAKFIRE_ACTIVATION_SPELL = 10104;
	WAKFIRE_DEACTIVATION_SPELL = 10105;
	ROYAL_TOFUTER_ACTIVATION_SPELL = 10106;
	ROYAL_TOFUTER_DEACTIVATION_SPELL = 10107;
	ROYAL_GOBBALLER_ACTIVATION_SPELL = 10108;
	ROYAL_GOBBALLER_DEACTIVATION_SPELL = 10109;
	OCCULT_PILLAGE_SPELL = 10110;
	SACRED_BOOTY_SPELL = 10111;
	STAIN_ACTIVATION_SPELL = 10112;
	STAIN_DEACTIVATION_SPELL = 10113;
	TRAINING_CHECKER_ACTIVATION_SPELL = 10114;
	DECENDR_PRANKS_ACTIVATION_SPELL = 10115;
	IOPINISM_ACTIVATION_SPELL = 10116;
	TOTAL_IOPINISM_ACTIVATION_SPELL = 10117;
	INVETERATE_CHEATER_ACTIVATION_SPELL = 10118;
	FEATHERED_WIND_SPELL = 10119;
	BLACK_CROW_LAUGH_ACTIVATION_SPELL = 10120;
	BITE_SPELL = 10121;
	GHOUL_TRANSFORM_ACTIVATION_SPELL = 10122;
	GHOUL_INVOCATION_ACTIVATION_SPELL = 10123;
	SOME_LIKE_IT_HOT_SPELL = 10124;
	EMBRACE_SPELL = 10125;
	CRITICAL_HEARTBREAK_ACTIVATION_SPELL = 10126;
	KATARSIK_LINK_ACTIVATION_SPELL = 10127;
	KATARSIK_LINK_DEACTIVATION_SPELL = 10128;
	CRAVINGS_ACTIVATION_SPELL = 10129;
	WAKFORCE_SPELL = 10130;
	KATARSIK_LINK_GLOBAL_ACTIVATION_SPELL = 10131;
	KATARSIK_LINK_GLOBAL_DEACTIVATION_SPELL = 10132;
	BRETHREN_OF_THE_COAST_SPELL = 10133;
	TOTOR_SPELL = 10134;
	WILD_RANGE_ACTIVATION_SPELL = 10135;
	WILD_RANGE_DEACTIVATION_SPELL = 10136;
	POTION_BAG_SPELL = 10137;
	POTION_BAG_ACTIVATION_SPELL = 10138;
	MOON_HAMMER_ACTIVATION_SPELL = 10140;
	IMMATURE_DREGGON_BIRTH_SPELL = 10141;
	BROODING_SPELL = 10142;
	DRACONIC_SUPPORT_GLOBAL_ACTIVATION_SPELL = 10143;
	DRACONIC_SUPPORT_GLOBAL_DEACTIVATION_SPELL = 10144;
	DRAGOON_PRANK_GLOBAL_ACTIVATION_SPELL = 10145;
	DRAGOON_PRANK_GLOBAL_DEACTIVATION_SPELL = 10146;
	ASSAULT_DISC_SPELL = 10147;
	BUBBLE_ACTIVATION_SPELL = 10148;
	BUBBLE_DEACTIVATION_SPELL = 10149;
	GLUE_SPELL = 10150;
	DISEMBOWELMENT_SPELL = 10151;
	HOIST_UP_SPELL = 10152;
	BORN_SPRINTER_SPELL = 10153;
	GOLDDEN_PARACHUTE_SPELL = 10154;
	KROSYMPA_UPDATE_SPELL = 10155;
	TURT_HELL_SPELL = 10156;
	DEMONIC_REWARD_LIGHTNING_SPELL = 15000;
	DEMONIC_REWARD_GLUE_SPELL = 15001;
	DEMONIC_REWARD_CONFUSE_SPELL = 15002;
	DEMONIC_REWARD_PANDAWA_STYLE_SPELL = 15003;
	DEMONIC_REWARD_DAGUIEROS_SPELL = 15004;
	DEMONIC_REWARD_RAZIEL_SWORD_SPELL = 15005;
	DEMONIC_REWARD_MISHMASHOVEL_SPELL = 15006;
	DEMONIC_REWARD_WA_STAFF_SPELL = 15007;
	DEMONIC_REWARD_HAMMER_SPELL = 15008;
	DEMONIC_REWARD_ANGEL_BOW_SPELL = 15009;
	DEMONIC_REWARD_CELESTIAL_WAND_SPELL = 15010;
	HERD_SPELL = 20001;
	PINGWINDSURF_ACTIVATION_SPELL = 20012;
	PINGWINDSURF_DESACTIVATION_SPELL = 20013;
	RIKTUS_TRIO_SPELL = 20015;
	TOTEMIC_SLOW_ACTIVATION_SPELL = 20022;
	TOTEMIC_SLOW_DEACTIVATION_SPELL = 20023;
	TOTEMIC_HEALTH_ACTIVATION_SPELL = 20024;
	TOTEMIC_HEALTH_DEACTIVATION_SPELL = 20025;
	TOTEMIC_SHIELD_ACTIVATION_SPELL = 20026;
	TOTEMIC_SHIELD_DEACTIVATION_SPELL = 20027;
	TOTEMIC_DAMAGE_ACTIVATION_SPELL = 20028;
	TOTEMIC_DAMAGE_DEACTIVATION_SPELL = 20029;
	TOTEMIC_DAMAGE_SPELL = 20030;
	DARK_VLAD_BERZERKER_SPELL = 20032;
	DARK_VLAD_BERZERKER_DEACTIVATION_SPELL = 20033;
	GOUL_CONTAMINATE_SPREAD_SPELL = 20035;
	HERITAGE_DAMAGE_SPREAD_SPELL = 20039;
	HERITAGE_SHIELD_SPREAD_SPELL = 20040;
	HERITAGE_FAST_SPREAD_SPELL = 20041;
	HERITAGE_HEALTH_SPREAD_SPELL = 20042;
	HERITAGE_DAMAGE_ACTIVATION_SPELL = 20043;
	HERITAGE_SHIELD_ACTIVATION_SPELL = 20044;
	HERITAGE_FAST_ACTIVATION_SPELL = 20045;
	HERITAGE_HEALTH_ACTIVATION_SPELL = 20046;
	TRANTROA_TEMPETE_SPELL_ACTIVATION = 20050;
	GOUL_EXPLOSION_ADD_SPELL = 20060;
	SEITH_SELF_PA_BUFF_ACTIVATION = 20061;
	VAMPYRO_INVULNERABILITY_ACTIVATION_SPELL = 20069;
	VAMPYRO_INVULNERABILITY_DEACTIVATION_SPELL = 20070;
	XLII_FOURSEASONS_ACTIVATION_SPELL = 20071;
	CHESSLEVEL_ACTIVATION_SPELL = 20072;
	CHESSLEVEL_DEACTIVATION_SPELL = 20073;
	CHESSLEVEL_ABILITY_GAIN = 20074;
}

// ref: com.ankamagames.arena.protocol.AreaOfEffect
enum AreaOfEffect {
	POINT_AOE = 1;
	SQUARE_AOE = 2;
	CROSS_AOE = 3;
	HAMMER_AOE = 4;
	STAFF_AOE = 5;
	SHOVEL_AOE = 6;
	BOARD_AOE = 7;
	HAND_AOE = 8;
	BREATH_AOE = 9;
}

// ref: com.ankamagames.arena.protocol.ArenaDieSide
enum ArenaDieSide {
	CRITICAL = 1;
	ARMOR = 2;
	TACKLE = 3;
	DODGE = 4;
	CRITICAL_DODGE = 5;
	DOFUS = 6;
}

// ref: com.ankamagames.arena.protocol.Attribute
enum Attribute {
	LIFE_POINTS = 0;
	ACTION_POINTS = 1;
	MOVEMENT_POINTS = 2;
	RANGE = 3;
	SPELL_AP_COST = 4;
	SPELL_POWER = 5;
}

// ref: com.ankamagames.arena.protocol.AttributeEffectType
enum AttributeEffectType {
	ATTRIBUTE_MODIFICATION_EFFECT = 0;
	ATTRIBUTE_SET_EFFECT = 1;
	ATTRIBUTE_TOKEN_EFFECT = 2;
	ATTRIBUTE_STEAL_EFFECT = 3;
	ATTRIBUTE_SET_SOURCED_MODIFICATION = 4;
}

// ref: com.ankamagames.arena.protocol.AttributeValueSource
enum AttributeValueSource {
	ATTRIBUTE_FROM_CASTER = 0;
	ATTRIBUTE_FROM_TARGET = 1;
}

// ref: com.ankamagames.arena.protocol.BoardType
enum BoardType {
	PVP = 1;
	PVE = 2;
}

// ref: com.ankamagames.arena.protocol.CellOccupationType
enum CellOccupationType {
	BUSH_CELL = 1;
	CRATE_CELL = 2;
	TREE_CELL = 3;
	ONE_KAMA_CELL = 4;
	TWO_KAMAS_CELL = 5;
	DEMON_CELL = 6;
	LEFT_PLACEMENT_CELL = 7;
	RIGHT_PLACEMENT_CELL = 8;
	THREE_KAMAS_CELL = 9;
	SPECIAL_CELL = 10;
}

// ref: com.ankamagames.arena.protocol.Comparator
enum Comparator {
	EQUAL = 1;
	NOT_EQUAL = 2;
	GREATER_THAN = 3;
	LESSER_THAN = 4;
	GREATER_OR_EQUAL_THAN = 5;
	LESSER_OR_EQUAL_THAN = 6;
}

// ref: com.ankamagames.arena.protocol.CriterionType
enum CriterionType {
	AND = 1;
	OR = 2;
	NOT = 3;
	APPLY_SINGLE_FIGURE_CRITERION_ON_CASTER = 4;
	APPLY_SINGLE_FIGURE_CRITERION_ON_TARGET_OR_INITIATOR = 5;
	IS_ONESELF = 6;
	IS_AT_DISTANCE = 7;
	IS_ALLY = 8;
	HAS_TARGET_TYPE = 9;
	CASTER_HAS_ALREADY_HIT_TARGET_THIS_TURN = 10;
	OBJECTIVES = 11;
	IS_IN_LAST_SPELL_CAST_AOE = 12;
	SECONDARY_TARGET_IS_EMPTY_CELL = 13;
}

// ref: com.ankamagames.arena.protocol.DemonicRewardCategory
enum DemonicRewardCategory {
	BOOST = 1;
	BUFF = 2;
	EQUIPMENT = 3;
}

// ref: com.ankamagames.arena.protocol.DemonicRewardRank
enum DemonicRewardRank {
	GRANITE_REWARD = 1;
	JADE_REWARD = 2;
	GOLD_REWARD = 3;
	RUBY_REWARD = 4;
}

// ref: com.ankamagames.arena.protocol.DieRollType
enum DieRollType {
	ATTACK_OPPOSE_TYPE = 1;
	ATTACK_COLLABORATE_TYPE = 2;
	DEFENSE_OPPOSE_TYPE = 3;
	DEFENSE_COLLABORATE_TYPE = 4;
	TACKLE_TYPE = 5;
	DODGE_TYPE = 6;
}

// ref: com.ankamagames.arena.protocol.DistanceCriterionMode
enum DistanceCriterionMode {
	FROM_CASTER = 1;
	FROM_SECONDARY_TARGET = 2;
	FROM_TARGET_CELL = 3;
}

// ref: com.ankamagames.arena.protocol.EffectDuration
enum EffectDuration {
	PERMANENT = 0;
	FULL_TURN = 1;
	TURN = 2;
	NEXT_CAST = 3;
	THIS_CAST = 4;
	LIFE_POINTS_CHANGE = 5;
	TURN_STARTING_NEXT_CAST = 6;
	END_PLAYER_TURN = 7;
}

// ref: com.ankamagames.arena.protocol.EffectGroupType
enum EffectGroupType {
	DEFAULT = 0;
	MOVEMENT_GROUP = 1;
	MOVEMENT_PART = 2;
	MOVEMENT_COST = 3;
	MOVEMENT_TACKLE_DIE_ROLL = 4;
	MOVEMENT_DODGE_DIE_ROLL = 5;
	MOVEMENT_TACKLE_DODGE = 6;
	PLACEMENT_START_GROUP = 8;
	PLACEMENT_END_GROUP = 9;
	SPELL_COST = 10;
	SPELL_MAIN_EFFECT = 11;
	SPELL_SECONDARY_EFFECT = 12;
	SPELL_CAST_GROUP = 13;
	SPELL_ATTACKER_DIE_ROLL = 14;
	SPELL_DEFENDER_DIE_ROLL = 15;
	SPELL_DEFENSE = 17;
	SPELL_CUTSCENE = 18;
	ACTION_COST = 20;
	PHASE_CHANGE_GROUP = 25;
	FIGURE_DEATH_GROUP = 30;
	FIGURE_DYING_GROUP = 31;
	EPHEMERAL_ACTIVATION = 40;
	EPHEMERAL_DEACTIVATION = 41;
	KAMA_PICKUP = 50;
	KAMA_GAIN_BY_STRAIN = 51;
	GG_PURCHASE = 52;
	GG_LOSS_BY_DOUBLE = 53;
	GG_STEAL_BY_DEATH = 54;
	STRAIN_DIE_ALLOCATION_GROUP = 55;
	ATTRIBUTE_RESET_ADJUSTMENTS = 56;
	DEMONIC_REWARD_INITIALISATION = 57;
	DEMONIC_REWARD_PURCHASE_GROUP = 58;
	DEMONIC_REWARD_TYPE_GROUP = 59;
	DEMONIC_REWARD_UNVEILING_GROUP = 60;
	DEMONIC_REWARD_ATTRIBUTION_GROUP = 61;
	DEMONIC_REWARD_ACTIVATION_GROUP = 62;
	DEMONIC_REWARD_DISCARD_GROUP = 63;
	DEMONIC_REWARD_SPELL_CAST_GROUP = 64;
	DEMONIC_REWARD_GAIN_GROUP = 65;
	GG_STEAL_SECONDARY_EFFECT = 66;
	EPHEMERAL_ABILITY_CHANGE = 67;
	TARGET_USAGE = 68;
	OBJECTIVE_EFFECT = 69;
	OBJECTIVE_ACTION_GROUP = 70;
	CRATE_BONUS_GROUP = 71;
	ERROR_GROUP = 72;
}

// ref: com.ankamagames.arena.protocol.EffectType
enum EffectType {
	ACTION_POINTS_MODIFICATION = 1;
	MOVEMENT_POINTS_MODIFICATION = 2;
	LIFE_POINTS_MODIFICATION = 3;
	RANGE_MODIFIER = 4;
	POSITION_CHANGE = 5;
	MOVEMENT = 6;
	SPELL_CAST = 7;
	DIE_ROLL = 8;
	KAMA_MODIFICATION = 9;
	GG_MODIFICATION = 10;
	WILD_GG_GOT = 11;
	PAWN_REMOVAL = 12;
	FIGURE_DEATH = 13;
	STRAIN_ROLL = 14;
	STRAIN_DIE_SPECIALIZATION = 15;
	STRAIN_DIE_ALLOCATION = 16;
	STRAIN_ROLL_DOUBLE = 17;
	ABILITY_CHANGE = 18;
	CUTSCENE = 19;
	PUSH = 20;
	SPELL_USAGE = 21;
	ACTION_POINTS_SET = 22;
	MOVEMENT_POINTS_SET = 23;
	RANGE_SET = 24;
	PHASE_CHANGE = 25;
	ACTION_POINT_TOKEN = 26;
	MOVEMENT_POINT_TOKEN = 27;
	TACKLE_EVENT = 28;
	DODGE_EVENT = 29;
	SUMMON_EVENT = 30;
	PLACEMENT_END = 31;
	RESISTANCE = 32;
	MATCH_END = 33;
	HEADS_OR_TAILS = 34;
	SPELL_AP_COST_MODIFICATION = 35;
	FIGURE_IS_DYING = 36;
	SPELL_POWER_MODIFICATION = 37;
	SPELL_POWER_SET = 38;
	SPELL_AP_COST_SET = 39;
	DEMONIC_REWARD_UNVEILING = 40;
	DEMONIC_REWARD_PURCHASE = 41;
	DEMONIC_REWARD_ATTRIBUTION = 42;
	DEMONIC_REWARD_TYPE = 43;
	DEMONIC_REWARD_STACK_POP = 44;
	DEMONIC_REWARD_ACTIVATION = 45;
	DEMONIC_REWARD_DISCARD = 46;
	SPELL_CHANGE = 47;
	OBJECTIVES_UPDATE = 48;
	SPAWN_EVENT = 49;
	FORCE_DICE_EVENT = 50;
	PHASE_SKIPPED = 51;
	RANGE_MODIFIER_TOKEN = 52;
	MANIFESTATION_CHANGE = 53;
	DEMONIC_REWARD_STACK_RESET = 54;
	FORCE_STRAIN_ROLL_EVENT = 55;
}

// ref: com.ankamagames.arena.protocol.EquipmentType
enum EquipmentType {
	EQUIPMENT_WEAPON = 1;
	EQUIPMENT_PANOPLY = 2;
	EQUIPMENT_PET = 3;
	EQUIPMENT_DOFUS = 4;
}

// ref: com.ankamagames.arena.protocol.ExpressionSource
enum ExpressionSource {
	MATCH_DEFINITION = 1;
	UNKNOWN = 99;
}

// ref: com.ankamagames.arena.protocol.FigureManifestation
enum FigureManifestation {
	YUGO = 1;
	ADAMAI = 2;
	QILBY = 3;
	PERCEDAL = 4;
	DARKVLAD = 5;
	JORIS = 6;
	PAPYCHA = 7;
	ROYALGOBBAL = 8;
}

// ref: com.ankamagames.arena.protocol.FigureTag
enum FigureTag {
	STEAMER = 4;
	SADIDA = 5;
	BROTHERHOOD_OF_THE_TOFU = 6;
	CRA = 7;
	XELOR = 8;
	IOP = 9;
	ENUTROF = 10;
	ELIATROPE = 11;
	ZOBAL = 12;
	ROUBLARD = 13;
	SACRIEUR = 14;
	SRAM = 15;
	ENIRIPSA = 16;
	KNIGHT = 17;
	TORMENTATOR = 18;
	PUDDLY = 19;
	KING_OF_THE_ROBOMATS = 20;
	ECAFLIP = 21;
	OSAMODAS = 22;
	POSSESSED = 23;
	BOSS = 24;
	VIGILANTE = 25;
	TEST = 26;
	VILLAIN = 27;
	TERMINATOT = 28;
	ULTIMATE = 29;
	MULTIMAN = 30;
	OUGINAK = 31;
	BANDIT = 32;
	PANDAWA = 33;
	FECA = 34;
	DRAGON = 35;
	TOFUFAMILY = 36;
	BOUFTOUFAMILY = 37;
	DEMON = 38;
	GOBBOWLER = 39;
	VAMPYRE = 40;
	OGRE = 41;
	WILD = 42;
	KANNIBALL = 43;
	DREGGON = 44;
	CHAFER = 45;
	PIWATE = 46;
	MINOTOR = 47;
	ALCHEMIST = 48;
	SHADOW = 49;
	HUPPERMAGE = 50;
	BRAKMAR_TAG = 51;
	BONTA_TAG = 52;
	SPECTER = 53;
	SHUSHU = 54;
	CONTROLLED = 55;
	HORDEMON = 10000;
	TOMBE = 10001;
	TOTEM = 10002;
}

// ref: com.ankamagames.arena.protocol.HeadsOrTailsResult
enum HeadsOrTailsResult {
	HEADS = 1;
	TAILS = 2;
}

// ref: com.ankamagames.arena.protocol.InvocationIds
enum InvocationIds {
	WATER_BOMB = 10000;
	GRENADO = 10001;
	FIREBOMB = 10002;
	TOFU = 10003;
	GOBBALL = 10004;
	MADOLL = 10005;
	BLOCK_DOLL = 10006;
	SACRIFICIAL_DOLL = 10007;
	LETHAL_TRAP = 10008;
	WABBIT = 10009;
	LOST_DOLL = 10010;
	BUBOTRON = 10011;
	TRICKY_TRAP = 10012;
	CRACKSTONE = 10013;
	PRESPIC = 10014;
	PINK_DRAGOONE = 10015;
	LIVING_SHOVEL = 10016;
	HARPOONER = 10017;
	TACTURRET = 10018;
	LIFESAVER = 10019;
	CROBAK = 10020;
	GHOUL = 10021;
	KATAR_OFFSPRING = 10022;
	KOKONUT = 10023;
	IMMATURE_DREGGON_BLUE = 10024;
	IMMATURE_DREGGON_YELLOW = 10025;
	IMMATURE_DREGGON_RED = 10026;
	PUPUCE = 10027;
	BLACK_GOBBLY = 20002;
	WHITE_GOBBLY = 20003;
	SEITH = 20004;
	TRANTROA = 20005;
	XLII = 20006;
	PINGWINKLE = 20008;
	SLOW_TOTEM = 20013;
	HEALTH_TOTEM = 20014;
	SHIELD_TOTEM = 20015;
	DAMAGE_TOTEM = 20016;
	GHOUL_SICK = 20017;
	GHOUL_BOMB = 20018;
	GHOUL_DIST = 20019;
	CHAFFER = 20020;
	TOMB = 20022;
}

// ref: com.ankamagames.arena.protocol.InvocationKind
enum InvocationKind {
	CREATURE = 1;
	BOMB = 2;
	TRAP = 3;
	TURRET = 4;
	OBSTACLE = 5;
}

// ref: com.ankamagames.arena.protocol.LeagueType
enum LeagueType {
	GRANITE = 1;
	JADE = 2;
	GOLD = 3;
	RUBY = 4;
	ELITE = 5;
}

// ref: com.ankamagames.arena.protocol.MapType
enum MapType {
	ASTRUB = 1;
	MOON = 2;
	BRAKMAR = 3;
	FRIGOST = 4;
	KATREPAT = 5;
	XELORIUM = 6;
}

// ref: com.ankamagames.arena.protocol.MatchSubType
enum MatchSubType {
	MELEE = 1;
}

// ref: com.ankamagames.arena.protocol.MatchType
enum MatchType {
	RANDOM = 1;
	FRIENDLY = 2;
	TOURNAMENT = 3;
	TUTORIAL = 4;
	MATCH_PVE = 5;
	RANDOM_NOT_RANKED = 6;
}

// ref: com.ankamagames.arena.protocol.ObjectiveActionType
enum ObjectiveActionType {
	SPAWN_FIGURE_ACTION = 1;
	NULL_ACTION = 2;
	FORCE_DICE_ACTION = 3;
	HEAL_ACTION = 4;
	DESPAWN_ACTION = 5;
	RESET_DEMONIC_REWARD_STACK = 6;
	FORCE_STRAIN_ROLL = 7;
}

// ref: com.ankamagames.arena.protocol.ObjectivesCriterionType
enum ObjectivesCriterionType {
	IS_FIG_ON_CELL = 1;
	IS_FIG_AT_DISTANCE_OF_OTHER_FIG = 2;
	OBJECTIVES_IN_STATE = 3;
	IS_FIG_DEAD = 4;
	IS_PHASE_SIDE = 5;
	IS_PHASE_OF_EXTERNAL_ID = 6;
}

// ref: com.ankamagames.arena.protocol.ObjectiveState
enum ObjectiveState {
	SUCCESS = 1;
	FAILED = 2;
	STARTED = 3;
	IDLE = 4;
}

// ref: com.ankamagames.arena.protocol.PawnType
enum PawnType {
	TREE = 1;
	BUSH = 2;
	KAMA = 3;
	CRATE = 4;
}

// ref: com.ankamagames.arena.protocol.PhaseType
enum PhaseType {
	INITIAL = 1;
	LOADING = 2;
	PRESENTATION = 3;
	PLACEMENT = 4;
	OBSERVATION = 5;
	TRANSITION = 6;
	PLAY_FIGURE = 7;
	FINAL = 8;
}

// ref: com.ankamagames.arena.protocol.PredefinedChatMessage
enum PredefinedChatMessage {
	hello_message = 0;
	wellplayed_message = 1;
	lucky_message = 2;
	rage_message = 3;
	thanks_message = 4;
	sorry_message = 5;
	oops_message = 6;
	threaten_message = 7;
}

// ref: com.ankamagames.arena.protocol.PushPullType
enum PushPullType {
	PUSH_TARGET = 0;
	PULL_TARGET = 1;
	PUSH_CASTER = 2;
	PULL_CASTER = 3;
}

// ref: com.ankamagames.arena.protocol.QuestIds
enum QuestIds {
	PVP_WIN_X_RANKED = 1;
	PVP_WIN_X_TOUNAMENT = 2;
	PVP_KO_X_KROS = 3;
	PVP_PICK_UP_X_KAMA = 4;
	PVP_ACTIVATE_X_RD_BOOST = 5;
	PVP_ACTIVATE_X_RD_ITEM = 6;
	PVP_WIN_X_WITH_TAG = 7;
	PVP_WIN_X_WITH_NO_LVL_1 = 8;
	PVP_WIN_X_WITH_NO_LVL_2_OR_LESS = 9;
	PVP_WIN_X_WITH_NO_LVL_6 = 10;
	PVP_WIN_X_WITH_NO_LVL_5_OR_MORE = 11;
	PVP_WIN_X_WITH_LVL_3_ONLY = 12;
	PVE_WIN_MAP_WITH_KROS = 13;
}

// ref: com.ankamagames.arena.protocol.QuestType
enum QuestType {
	GENERAL = 1;
	TEAM_CONSTRAINT = 2;
	PVE_QUEST = 3;
}

// ref: com.ankamagames.arena.protocol.QuestXConstraintType
enum QuestXConstraintType {
	RANK = 1;
	BEST_RANK = 2;
}

// ref: com.ankamagames.arena.protocol.ReasonRewardType
enum ReasonRewardType {
	TOURNAMENT_REWARD = 1;
	CONSECUTIVE_VICTORIES_REWARD = 2;
	RATING_REWARD = 3;
	VICTORY_MODULO = 4;
	ADMINISTRATION = 5;
	SEASON_REWARD = 6;
	PVE_STAR_EARNED = 7;
	PVE_FIRST_WIN_FOR_MD = 8;
	PVE_FIRST_WIN_FOR_BOSS = 9;
	ACHIEVEMENT = 10;
	MENU_TUTORIALS = 11;
	QUEST = 12;
	MELEE_REWARD = 13;
}

// ref: com.ankamagames.arena.protocol.Region
enum Region {
	any = 0;
	xelorium = 1;
	astrub = 2;
	frigost = 3;
	moon = 4;
	brakmar = 5;
	katrepat = 6;
}

// ref: com.ankamagames.arena.protocol.RewardCurrencyType
enum RewardCurrencyType {
	KROZ = 1;
	OGRINE = 2;
	FRAGMENT = 3;
}

// ref: com.ankamagames.arena.protocol.RewardType
enum RewardType {
	CURRENCY = 1;
}

// ref: com.ankamagames.arena.protocol.Side
enum Side {
	LEFT = 1;
	RIGHT = 2;
}

// ref: com.ankamagames.arena.protocol.SimpleSpellModifierType
enum SimpleSpellModifierType {
	LIFESTEALING = 0;
	PIERCE_ARMOR = 1;
	DOUBLE_CRITICALS = 2;
	MULTIPLE_TARGET = 3;
}

// ref: com.ankamagames.arena.protocol.SingleFigureCriterionType
enum SingleFigureCriterionType {
	FIRST_ACTION = 1;
	HAS_ALLIES_WITH_TAG_COUNT = 2;
	HAS_INJURED_ALLIES_WITH_TAG_COUNT = 3;
	HAS_ATTRIBUTE_MODIFICATION_FROM_EFFECT_SOURCE = 4;
	HAS_ADJACENT_INVOCATION_COUNT = 5;
	HAS_LEVEL = 6;
	HAS_TAG = 7;
	HAS_INJURY_MARKER_COUNT = 8;
	HAS_ATTRIBUTE = 10;
	IS_INVOCATION = 11;
	IS_INVOCATION_OF_KIND = 12;
	IS_INVOCATION_OF_TYPE = 13;
	IS_CHARACTER = 14;
	HAS_ABILITY = 15;
	FIRST_CAST_IN_PHASE = 16;
	HAS_KAMAS = 17;
	FIGURE_ON_BOARD_WITH_TAG_COUNT = 18;
	HAS_TOKEN_COUNT = 19;
	IS_DAMAGE_SPELL = 20;
	HAS_ALREADY_BEEN_HIT_BY_FIGURE_WITH_TAG_DURING_THIS_PLAYER_TURN = 21;
	HAS_PICKUP_KAMA_DURING_TURN = 22;
	HAS_ADJACENT_MANIFESTATION = 23;
	HAS_ADJACENT_ALLY_WITH_ABILITY = 24;
	HAS_RELATIVE_LEVEL = 25;
	HAS_KAMA_COUNT_FROM_OPPONENT = 26;
	HAS_ALREADY_UNDERGO_EFFECT_THIS_CAST = 27;
	HAS_AVAILABLE_MANIFESTATION = 28;
	HAS_ALLIES_COUNT = 29;
	HAS_DEMONIC_REWARD = 30;
}

// ref: com.ankamagames.arena.protocol.SpellEffectApplicationType
enum SpellEffectApplicationType {
	APPLY_ON_TARGET = 1;
	APPLY_ON_CASTER = 2;
	APPLY_ON_TARGETED_CELL = 3;
	APPLY_ON_SECONDARY_TARGET = 4;
	APPLY_ON_CASTER_CELL = 5;
}

// ref: com.ankamagames.arena.protocol.SpellEffectType
enum SpellEffectType {
	POWER_MODIFIER_EFFECT = 0;
	ATTRIBUTE_EFFECT = 1;
	PUSH_PULL_EFFECT = 2;
	SWAP_EFFECT = 3;
	SUMMON_EFFECT = 4;
	APPLY_USURY = 5;
	TELEPORT_EFFECT = 6;
	ABILITY_EFFECT = 7;
	HEADS_OR_TAILS_EFFECT = 8;
	ACTIVATE_SPELL = 9;
	ABILITY_SYNC = 10;
	KAMA_MODIFICATION_EFFECT = 11;
	GG_STEAL_EFFECT = 12;
	DEMONIC_REWARD_GAIN_EFFECT = 13;
	CHOICE_EFFECT = 15;
	SPELL_GAIN_EFFECT = 17;
	END_PHASE_EFFECT = 18;
	KAMA_REMOVAL_EFFECT = 19;
	KAMA_PICK_UP_EFFECT = 20;
	KAMA_STEAL_EFFECT = 21;
	MANIFESTATION_SWAP_EFFECT = 22;
	INJURIES_EXCHANGE_EFFECT = 23;
	BROODING_IMMATURE_DREGGON_EFFECT = 24;
}

// ref: com.ankamagames.arena.protocol.SpellModificationUse
enum SpellModificationUse {
	ALL_SPELLS = 0;
	MELEE_SPELLS_ONLY = 1;
}

// ref: com.ankamagames.arena.protocol.Superlative
enum Superlative {
	GREATEST = 1;
	LOWEST = 2;
}

// ref: com.ankamagames.arena.protocol.TargetType
enum TargetType {
	EMPTY_CELL = 1;
	BLOCKING_PAWN = 2;
	FIGURE_ALLY = 3;
	FIGURE_ENEMY = 4;
	CREATURE_ALLY = 5;
	CREATURE_ENEMY = 6;
	INVOCATION_BOMB = 7;
	ALLY_DYING = 8;
	EMPTY_OWN_PLACEMENT_CELL = 9;
	TURRET_ALLY = 10;
	TURRET_ENEMY = 11;
	INVOCATION_OBSTACLE = 12;
}

// ref: com.ankamagames.arena.protocol.TeleportType
enum TeleportType {
	CASTER_TO_TARGET = 0;
	SECONDARY_TARGET_TO_TARGET = 1;
	CASTER_TO_SECONDARY_TARGET = 2;
}

// ref: com.ankamagames.arena.protocol.TriggerExecution
enum TriggerExecution {
	EXECUTE_ON_ACTOR = 1;
	EXECUTE_ON_TARGET = 2;
	EXECUTE_ON_ALL = 3;
	EXECUTE_ON_DEAD_TARGET = 4;
}

// ref: com.ankamagames.arena.protocol.TriggerType
enum TriggerType {
	GAME_STARTED = 1;
	TURN_STARTED = 2;
	TURN_ENDED = 3;
	ANY_FIGURE_DEATH = 4;
	FIGURE_HURT = 6;
	LIFE_MODIFIED = 7;
	TACKLE_ATTEMPTED = 8;
	FIGURE_MOVED = 9;
	SELF_MOVED = 11;
	FIGURE_TRAPPED = 12;
	FIGURE_ABILITIES_MODIFIED = 13;
	ANY_FIGURE_PRE_DEATH = 14;
	SELF_FIGURE_PRE_DEATH = 15;
	SELF_HURT = 16;
	SELF_ABILITIES_MODIFIED = 17;
	ANY_FIGURE_HURT = 18;
	ANY_TURN_STARTED = 19;
	ANY_TURN_ENDED = 20;
	OBJECTIVE_UPDATED = 21;
	LOAD_ENDED = 22;
	LOAD_STARTED = 23;
	KAMA_VALUE_CHANGED = 24;
	ANY_INVOCATION_SUMMONED = 25;
	SPELL_PRE_CAST = 26;
	SELF_SPELL_CAST = 27;
	FIGURE_SPELL_CAST_ON_FIGURE = 28;
	DEMONIC_REWARD_PURCHASE_TRIGGER = 29;
	DEMONIC_REWARD_ATTRIBUTION_TRIGGER = 30;
	ANY_SPELL_PRE_CAST = 31;
	PRE_GAME_STARTED = 32;
	SPELL_PRE_CAST_WITHOUT_TARGET_TYPE_FILTER = 33;
	PLAYER_TURN_START = 34;
}

// ref: com.ankamagames.arena.protocol.VariableProperty
enum VariableProperty {
	NONE = 1;
	CURRENT_TURN = 2;
	TEAM_KAMAS = 3;
	OPPONENT_KAMAS = 4;
	REMAINING_KAMAS_ON_MAP = 5;
}

// ref: com.ankamagames.arena.protocol.VictoryType
enum VictoryType {
	GG = 1;
	OBJECTIVE = 2;
}

// ref: com.ankamagames.arena.protocol.AbilityEffect
message AbilityEffect {
	optional AbilityIds ability_id = 1;
	optional bool gain = 2;
	optional EffectSourceData source = 3;
	optional EffectDuration duration = 4;
}

// ref: com.ankamagames.arena.protocol.AbilityGainDetails
message AbilityGainDetails {
	optional int32 figure_id = 1;
	optional AbilityIds ability_id = 2;
	optional bool gain = 3;
	optional EffectSourceData source = 4;
}

// ref: com.ankamagames.arena.protocol.AbilitySyncEffect
message AbilitySyncEffect {
	optional EffectSourceData source = 3;
}

// ref: com.ankamagames.arena.protocol.AccountInformationMessage
message AccountInformationMessage {
	optional AccountInformationData account_information = 1;
	optional PlayerPreferencesData preferences = 2;
}

// ref: com.ankamagames.arena.protocol.Achievement
message Achievement {
	optional AchievementIds id = 1;
	optional int32 value = 2;
	optional int32 last_reward_value = 3;
}

// ref: com.ankamagames.arena.protocol.AchievementData
message AchievementData {
	optional AchievementIds type = 1;
	repeated AchievementStep steps = 2;
	optional AchievementCategory category = 3;
}

// ref: com.ankamagames.arena.protocol.AchievementReward
message AchievementReward {
	optional RewardCurrencyType currency_type = 1;
	optional int32 quantity = 2;
}

// ref: com.ankamagames.arena.protocol.AchievementStep
message AchievementStep {
	optional int32 value = 1;
	repeated AchievementReward rewards = 2;
}

// ref: com.ankamagames.arena.protocol.ActivateDemonicRewardMessage
message ActivateDemonicRewardMessage {
	optional PhaseInfoData phase_info = 1;
	optional int32 reward_id = 2;
	optional SpellCastParameterData parameters = 3;
}

// ref: com.ankamagames.arena.protocol.ActivateSpellEffect
message ActivateSpellEffect {
	optional int32 spell_id = 1;
}

// ref: com.ankamagames.arena.protocol.AdminMessageRequestMessage
message AdminMessageRequestMessage {
	optional string message = 1;
	optional string nickname = 2;
}

// ref: com.ankamagames.arena.protocol.AfkStatusMessage
message AfkStatusMessage {
	optional bool is_afk = 1;
}

// ref: com.ankamagames.arena.protocol.AndCriterionDetails
message AndCriterionDetails {
	repeated CriterionData criteria_list = 1;
}

// ref: com.ankamagames.arena.protocol.ApplicationExpr
message ApplicationExpr {
	optional Expr function = 1;
	optional Expr argument = 2;
}

// ref: com.ankamagames.arena.protocol.AreaOfEffectTarget
message AreaOfEffectTarget {
	optional AreaOfEffect area_type = 1;
	repeated TargetType affected_targets = 2;
}

// ref: com.ankamagames.arena.protocol.ArenaAbilityData
message ArenaAbilityData {
	optional AbilityIds id = 1;
	repeated SpellTrigger spell_triggers = 2;
	repeated int32 additional_spell_ids = 3;
	optional int32 damage_limiter = 4;
	optional bool can_be_copied = 5;
	optional SpellTrigger activation_spell_trigger = 6;
	optional SpellTrigger deactivation_spell_trigger = 7;
	optional int32 damage_and_kama_limiter = 8;
}

// ref: com.ankamagames.arena.protocol.ArenaGameData
message ArenaGameData {
	optional Ladder ladder = 1;
	optional KrozRewardData kroz_rewards = 9;
	repeated BoardData boards = 10;
	repeated MatchDefinition match_definitions = 12;
	repeated TeamCompositionConstraints team_composition_constraints = 13;
	repeated RuleData rules = 14;
	repeated ObjectiveData objectives = 15;
	repeated FigureManifestationData figure_manifestations = 16;
	repeated AchievementData achievements_datas = 17;
	repeated VariableDefinition variables = 18;
	repeated QuestData quests = 19;
	optional MeleeTournamentReward melee_reward = 20;
}

// ref: com.ankamagames.arena.protocol.ArenaPlayerInformationMessage
message ArenaPlayerInformationMessage {
	optional PlayerInformationData player_information = 1;
}

// ref: com.ankamagames.arena.protocol.ArenaSpellData
message ArenaSpellData {
	optional SpellReference id = 1;
	repeated TargetData target = 2;
	optional Expr predicate = 3;
	optional SecondaryTarget secondary_target = 5;
	optional AreaOfEffect preview_area_of_effect = 6;
	repeated SpellEffect effects = 7;
	optional CutsceneData cutscene = 8;
	repeated SimpleSpellModifier simple_modifier = 10;
	optional bool figure_spell = 11;
	optional int32 for_demonic_reward = 12;
	optional bool include_all_target_in_range = 13;
}

// ref: com.ankamagames.arena.protocol.ArenaTeamData
message ArenaTeamData {
	optional int32 id = 1;
	optional string name = 2;
	repeated PlayerFigureData player_figure = 3;
	optional bool is_human = 4;
	optional int32 account_id = 5;
}

// ref: com.ankamagames.arena.protocol.ArenaTeamInformationMessage
message ArenaTeamInformationMessage {
	repeated ArenaTeamData teams = 1;
}

// ref: com.ankamagames.arena.protocol.ArenaTeamInMatchData
message ArenaTeamInMatchData {
	optional Side side = 1;
	optional PlayerInformationData player_information = 2;
	repeated FigureInMatchIdentificationData figures = 3;
	repeated PlayerFigureData available_figure_manifestations = 5;
	optional ArenaTeamData arena_team_data = 6;
	optional MatchSubType match_sub_type = 7;
}

// ref: com.ankamagames.arena.protocol.Atom
message Atom {
	optional IntAtom int_atom = 1;
	optional AttributeAtom attribute_atom = 2;
	optional CriterionAtom criterion_atom = 3;
}

// ref: com.ankamagames.arena.protocol.AttributeAtom
message AttributeAtom {
	// ref: com.ankamagames.arena.protocol.AttributeAtom/Types/Type
	enum Type {
		MAX = 0;
		CURRENT = 1;
		TOKEN = 2;
	}

	optional Type type = 1;
	optional Attribute attribute = 2;
}

// ref: com.ankamagames.arena.protocol.AttributeDemonicRewardMessage
message AttributeDemonicRewardMessage {
	optional PhaseInfoData phase_info = 1;
	optional int32 reward_id = 2;
	optional int32 figure_id = 3;
}

// ref: com.ankamagames.arena.protocol.AttributeEffect
message AttributeEffect {
	optional AttributeEffectType type = 1;
	optional Attribute attribute = 2;
	optional EffectSourceData source = 4;
	optional EffectDuration duration = 5;
	optional SpellModification spell_modification = 6;
	optional AttributeValueSource attribute_value_source = 7;
	optional Expr value_expr = 10;
}

// ref: com.ankamagames.arena.protocol.AttributeModificationDetails
message AttributeModificationDetails {
	optional int32 figure_id = 1;
	optional int32 int_value = 2;
	optional EffectSourceData source = 3;
	optional EffectDuration duration = 4;
	optional LifeModificationDetails life_modification_details = 5;
	optional SpellModification spell_modification_details = 6;
}

// ref: com.ankamagames.arena.protocol.AttributeSetDetails
message AttributeSetDetails {
	optional int32 figure_id = 1;
	optional int32 int_value = 2;
	optional EffectSourceData source = 3;
}

// ref: com.ankamagames.arena.protocol.AttributeTokenSetDetails
message AttributeTokenSetDetails {
	optional int32 figure_id = 1;
	optional int32 total_value = 2;
	optional int32 delta_value = 3;
	optional EffectSourceData source = 4;
}

// ref: com.ankamagames.arena.protocol.BinaryOp
message BinaryOp {
	// ref: com.ankamagames.arena.protocol.BinaryOp/Types/Rounding
	enum Rounding {
		UP = 0;
		DOWN = 1;
		TO_ZERO = 2;
		NORMAL = 3;
	}

	// ref: com.ankamagames.arena.protocol.BinaryOp/Types/Type
	enum Type {
		ADD = 0;
		SUBTRACT = 1;
		MULTIPLY = 2;
		DIVIDE = 3;
		MAX = 4;
		MIN = 5;
	}

	optional Type type = 1;
	optional Term left = 2;
	optional Term right = 3;
	optional Rounding rounding = 4;
}

// ref: com.ankamagames.arena.protocol.BoardData
message BoardData {
	optional int32 id = 1;
	optional int32 size = 2;
	repeated CellOccupationData cells = 3;
	optional BoardType type = 4;
	optional bool is_scene_level_specified = 5;
	optional string scene_level_name = 6;
	optional MapType map_type = 7;
}

// ref: com.ankamagames.arena.protocol.CalendarSynchroMessage
message CalendarSynchroMessage {
	optional int64 time = 1;
}

// ref: com.ankamagames.arena.protocol.CancelMatchRequestMessage
message CancelMatchRequestMessage {
	optional MatchType type = 1;
}

// ref: com.ankamagames.arena.protocol.CellOccupationData
message CellOccupationData {
	optional CoordinatesData cell = 1;
	optional CellOccupationType occupation = 2;
}

// ref: com.ankamagames.arena.protocol.CheatMessage
message CheatMessage {
	repeated string parameters = 1;
}

// ref: com.ankamagames.arena.protocol.ChoiceEffect
message ChoiceEffect {
	repeated SpellEffect effects = 1;
}

// ref: com.ankamagames.arena.protocol.CollectionServerConnectionRequestMessage
message CollectionServerConnectionRequestMessage {
}

// ref: com.ankamagames.arena.protocol.CommandErrorMessage
message CommandErrorMessage {
	// ref: com.ankamagames.arena.protocol.CommandErrorMessage/Types/ErrorType
	enum ErrorType {
		USER_NOT_CONNECTED = 1;
		USER_UNKNOWN = 2;
	}

	optional ErrorType error = 1;
}

// ref: com.ankamagames.arena.protocol.ConnectionRequestMessage
message ConnectionRequestMessage {
	optional string name = 1;
	optional string pass = 2;
}

// ref: com.ankamagames.arena.protocol.ConsecutiveVictoriesKrozRewardData
message ConsecutiveVictoriesKrozRewardData {
	optional LeagueType league = 1;
	optional int32 victories = 2;
	optional int32 reward = 3;
	optional int32 repeat_every = 4;
}

// ref: com.ankamagames.arena.protocol.ConstantExpr
message ConstantExpr {
	// ref: com.ankamagames.arena.protocol.ConstantExpr/Types/ConstantValue
	message ConstantValue {
		optional int32 int_value = 1;
		optional bool bool_value = 2;
		optional EffectSourceData effect_source = 3;
		optional CoordinatesData cell = 4;
		repeated ConstantExpr.ConstantValue member_values = 5;
	}

	optional ConstantExprType type = 1;
	optional ConstantValue value = 2;
}

// ref: com.ankamagames.arena.protocol.ConstantExprType
message ConstantExprType {
	// ref: com.ankamagames.arena.protocol.ConstantExprType/Types/Form
	enum Form {
		RAW = 2;
		CONTAINER = 3;
	}

	// ref: com.ankamagames.arena.protocol.ConstantExprType/Types/RawExprType
	enum RawExprType {
		BOOL = 1;
		INT = 2;
		SPELL = 3;
		ABILITY = 4;
		TARGET_TYPE = 5;
		EFFECT_SOURCE = 6;
		ATTRIBUTE = 7;
		ATTRIBUTE_FACET = 8;
		TAG = 9;
		FIGURE_TYPE = 10;
		FIGURE_MANIFESTATION = 11;
		INVOCATION_TYPE = 12;
		INVOCATION_KIND = 13;
		CELL = 14;
		DURATION = 15;
		EVENT_GROUP = 16;
		EVENT = 17;
		EFFECT_TYPE = 18;
		LIVENESS = 19;
		EFFECT_GROUP_TYPE = 20;
		PHASE = 21;
		SIDE = 22;
		OBJECTIVE_STATE = 23;
		ACCOUNT = 24;
		CELL_OCCUPATION_TYPE = 25;
		DEMONIC_REWARD = 26;
	}

	optional Form form = 1;
	optional RawExprType raw_type = 2;
	optional ConstantExprType member_type = 3;
}

// ref: com.ankamagames.arena.protocol.CrateRangeBonusDetails
message CrateRangeBonusDetails {
	optional int32 figure_id = 1;
	optional bool bonus_enabled = 2;
}

// ref: com.ankamagames.arena.protocol.CriterionAtom
message CriterionAtom {
	optional CriterionData criterion = 1;
	repeated TargetType types = 2;
}

// ref: com.ankamagames.arena.protocol.CriterionData
message CriterionData {
	optional CriterionType type = 1;
	optional AndCriterionDetails and_criterion = 2;
	optional OrCriterionDetails or_criterion = 3;
	optional NotCriterionDetails not_criterion = 4;
	optional SingleFigureCriterionData single_figure_criterion = 5;
	optional IsAtDistanceCriterionDetails is_at_distance_criterion = 6;
	optional HasTargetTypeCriterionDetails has_target_type_criterion = 7;
	optional ObjectivesCriterionData objectives_criterion_data = 9;
}

// ref: com.ankamagames.arena.protocol.CrossPromo
message CrossPromo {
	optional int32 account_id = 1;
	optional int32 cross_gift_state = 2;
	optional string cross_gift_code = 3;
}

// ref: com.ankamagames.arena.protocol.CurrencyReward
message CurrencyReward {
	optional int32 amount = 1;
	optional ReasonRewardType type = 2;
	optional int32 numeric_qualifier = 3;
	optional RewardCurrencyType currency_type = 4;
}

// ref: com.ankamagames.arena.protocol.CutsceneData
message CutsceneData {
	optional int32 power_modifier_trigger = 1;
}

// ref: com.ankamagames.arena.protocol.CutsceneDetails
message CutsceneDetails {
	optional int32 spell_id = 1;
}

// ref: com.ankamagames.arena.protocol.DeclineMatchRequestMessage
message DeclineMatchRequestMessage {
	optional MatchType type = 1;
	optional string nickname = 2;
}

// ref: com.ankamagames.arena.protocol.DefenseDetails
message DefenseDetails {
	optional int32 figure_id = 1;
	optional AbilityIds ability_id = 2;
}

// ref: com.ankamagames.arena.protocol.DemonicRewardAndFigureDetails
message DemonicRewardAndFigureDetails {
	optional int32 figure_id = 1;
	optional int32 reward_id = 2;
}

// ref: com.ankamagames.arena.protocol.DemonicRewardData
message DemonicRewardData {
	optional int32 id = 1;
	optional DemonicRewardCategory type = 2;
	optional DemonicRewardRank rank = 3;
	optional EquipmentType equipment_type = 4;
	repeated SpellEffect effect = 5;
	optional AdditionnalSpellIds spell_trigger = 6;
	optional DemonicRewardTargetData target = 7;
	repeated SpellEffect deactivation_effect = 8;
}

// ref: com.ankamagames.arena.protocol.DemonicRewardGainEffect
message DemonicRewardGainEffect {
	optional DemonicRewardRank rank = 1;
}

// ref: com.ankamagames.arena.protocol.DemonicRewardIdList
message DemonicRewardIdList {
	repeated int32 ids = 1;
}

// ref: com.ankamagames.arena.protocol.DemonicRewardKamaCost
message DemonicRewardKamaCost {
	optional DemonicRewardRank rank = 1;
	optional int32 kama_cost = 2;
	optional int32 crafter_kama_reduction = 3;
}

// ref: com.ankamagames.arena.protocol.DemonicRewardPurchaseDetails
message DemonicRewardPurchaseDetails {
	optional Side side = 1;
	optional int32 reward_id = 2;
	optional DemonicRewardRank rank = 3;
	optional bool from_hidden_stack = 4;
}

// ref: com.ankamagames.arena.protocol.DemonicRewardStackPopDetails
message DemonicRewardStackPopDetails {
	optional DemonicRewardStackReference from_stack = 1;
}

// ref: com.ankamagames.arena.protocol.DemonicRewardStackReference
message DemonicRewardStackReference {
	optional DemonicRewardRank rank = 1;
	optional int32 stack_id = 2;
	optional bool visible_stack = 3;
}

// ref: com.ankamagames.arena.protocol.DemonicRewardStackResetDetails
message DemonicRewardStackResetDetails {
	optional DemonicRewardStackReference stack = 1;
}

// ref: com.ankamagames.arena.protocol.DemonicRewardTargetData
message DemonicRewardTargetData {
	optional int32 min_range = 1;
	optional int32 max_range = 2;
	repeated TargetType target_types = 3;
}

// ref: com.ankamagames.arena.protocol.DemonicRewardTypeDetails
message DemonicRewardTypeDetails {
	optional int32 reward_type_id = 1;
	optional int32 reward_id = 2;
}

// ref: com.ankamagames.arena.protocol.DemonicRewardUnveilingDetails
message DemonicRewardUnveilingDetails {
	optional DemonicRewardStackReference from_stack = 1;
	optional DemonicRewardStackReference to_stack = 2;
	optional DemonicRewardTypeDetails reward_type_details = 3;
}

// ref: com.ankamagames.arena.protocol.DieRollDetails
message DieRollDetails {
	// ref: com.ankamagames.arena.protocol.DieRollDetails/Types/SpecialDieLean
	enum SpecialDieLean {
		OPPOSE = 1;
		COLLABORATE = 2;
	}

	optional int32 figure_id = 1;
	repeated ArenaDieSide die_side = 2;
	optional SpecialDieLean special_die_lean = 3;
}

// ref: com.ankamagames.arena.protocol.EffectData
message EffectData {
	optional EffectType type = 1;
	optional int32 tag = 2;
	optional AbilityGainDetails ability_gain_details = 10;
	optional AttributeModificationDetails attribute_modification_details = 11;
	optional DieRollDetails die_roll_details = 12;
	optional ObjectIdDetails object_id_details = 13;
	optional PositionChangeDetails position_change_details = 14;
	optional SpellCastDetails spell_cast_details = 15;
	optional StrainRollDetails strain_roll_details = 16;
	optional StrainDieSpecializationDetails strain_die_specialization_details = 17;
	optional StrainDieAllocationDetails strain_die_allocation_details = 18;
	optional TeamScoreDetails team_score_details = 19;
	optional CutsceneDetails cutscene_details = 20;
	optional SpellUsageDetails spell_usage_details = 21;
	optional AttributeSetDetails attribute_set_details = 22;
	optional PhaseChangeDetails phase_change_details = 23;
	optional AttributeTokenSetDetails attribute_token_set_details = 24;
	optional SummonDetails summon_details = 25;
	optional CrateRangeBonusDetails crate_range_bonus_details = 26;
	optional DefenseDetails defense_details = 27;
	optional MatchEndDetails match_end_details = 28;
	optional HeadsOrTailsDetails heads_or_tails_details = 29;
	optional PawnRemovalDetails pawn_removal_details = 30;
	optional DemonicRewardUnveilingDetails demonic_reward_unveiling_details = 31;
	optional DemonicRewardPurchaseDetails demonic_reward_purchase_details = 32;
	optional DemonicRewardTypeDetails demonic_reward_type_details = 33;
	optional DemonicRewardStackPopDetails demonic_reward_stack_pop_details = 34;
	optional DemonicRewardAndFigureDetails demonic_reward_and_figure_details = 35;
	optional SpellChangeDetails spell_change_details = 36;
	optional ObjectiveDetails objective_details = 37;
	optional SpawnDetails spawn_details = 38;
	optional ManifestationChangeDetails manifestation_change_details = 39;
	optional DemonicRewardStackResetDetails demonic_reward_start_reset_details = 40;
}

// ref: com.ankamagames.arena.protocol.EffectGroupData
message EffectGroupData {
	optional EffectGroupType type = 1;
	repeated EffectData effects = 2;
	repeated EffectGroupData child_groups = 3;
}

// ref: com.ankamagames.arena.protocol.EffectSourceData
message EffectSourceData {
	optional ActionType action_type = 1;
	optional int32 action_id = 2;
}

// ref: com.ankamagames.arena.protocol.EventMessage
message EventMessage {
	repeated EffectGroupData effect_groups = 1;
}

// ref: com.ankamagames.arena.protocol.Expr
message Expr {
	// ref: com.ankamagames.arena.protocol.Expr/Types/BuiltinExpr
	enum BuiltinExpr {
		AND = 1;
		OR = 2;
		NOT = 3;
		PLUS = 4;
		MINUS = 5;
		TIMES = 6;
		DIV = 7;
		UMINUS = 8;
		EQ = 9;
		NE = 10;
		GT = 11;
		LT = 12;
		GE = 13;
		LE = 14;
		IS_MANIFESTATION_OF = 15;
		FIGURE_TYPE_OF = 16;
		IS_INVOCATION = 17;
		INVOCATION_TYPE_OF = 18;
		INVOCATION_KIND_OF = 19;
		HAS_TAG = 20;
		HAS_ABILITY = 21;
		HAS_ABILITY_INTRINSICALLY = 22;
		HAS_LIVENESS = 23;
		IS_DAMAGE_SPELL = 24;
		IS_EMPTY_CELL = 25;
		TEAM_OF = 26;
		FIGURES = 27;
		OTHER_TEAM = 28;
		ADJACENT_FIGURES = 29;
		ATTRIBUTE_MODIFICATION_FROM = 30;
		ATTRIBUTE_VALUE = 31;
		ATTRIBUTE_TOKEN_COUNT = 32;
		INJURY_MARKERS = 33;
		KAMA_COUNT = 34;
		LEVEL = 35;
		HAS_TARGET_TYPE = 36;
		DISTANCE = 37;
		POSITION = 38;
		EVENTS_GROUP_FOR = 39;
		EVENT_GROUP_TYPE = 40;
		EVENTS = 41;
		PARENT_EVENT_GROUP = 42;
		HAS_EVENT_EFFECT_TYPE = 43;
		EVENT_SOURCE = 44;
		EVENT_FIGURE = 45;
		EVENT_FROM_ACTION = 46;
		EFFECT_VALUE = 47;
		SPELL_ID = 48;
		EFFECT_SPELL = 49;
		IS_HIT = 50;
		HAS_MANIFESTATION = 51;
		IS_IN_SPELL_AOE = 52;
		FIGURE_AT = 53;
		SUBTRACT = 54;
		ADD = 55;
		EXTERNAL_ID = 56;
		PHASE_TURN = 57;
		PHASE_FIGURE = 58;
		PHASE_SIDE = 59;
		FIGURE_WITH_EXTERNAL_ID = 60;
		OBJECTIVE_STATE_FROM_ID = 61;
		FIGURE_SIDE = 62;
		LEVEL_COMPLETED_BY_PLAYER = 63;
		OPTIONAL_DISTANCE = 64;
		GE_OPTIONAL = 65;
		LE_OPTIONAL = 66;
		GT_OPTIONAL = 67;
		LT_OPTIONAL = 68;
		IS_CELL_OCCUPATION_TYPE = 69;
		DEMONIC_REWARDS = 70;
		HAS_DEMONIC_REWARD = 71;
		POSITION_FROM_OPTIONAL = 72;
		TYPE_ID = 73;
		GG_COUNT = 74;
		LAND = 75;
		LOR = 76;
		HAS_KAMA_ON_CELL = 77;
	}

	// ref: com.ankamagames.arena.protocol.Expr/Types/ContextExpr
	enum ContextExpr {
		CASTER = 1;
		TARGET = 2;
		SPELL_CAST = 3;
		INITIATOR = 4;
		TARGET_CELL = 5;
		SPELL_TARGET_CELL = 6;
		SECONDARY_TARGET_CELL = 7;
		SECONDARY_TARGET = 8;
		CURRENT_ACCOUNT = 9;
		DEMONIC_REWARD = 10;
		TARGETS = 11;
		VALUE = 12;
		CASTER_CELL = 13;
		SIDE = 14;
	}

	// ref: com.ankamagames.arena.protocol.Expr/Types/Form
	enum Form {
		CONSTANT = 3;
		VARIABLE = 4;
		LAMBDA = 5;
		APPLICATION = 6;
		CONTEXT = 7;
		BUILTIN = 8;
		POLYMORPHIC = 9;
		NULLARY = 10;
	}

	// ref: com.ankamagames.arena.protocol.Expr/Types/NullaryExpr
	enum NullaryExpr {
		NIL = 1;
		TARGET_OPTION = 2;
		TARGET_CELL_OPTION = 3;
		INITIATOR_OPTION = 4;
		SECONDARY_TARGET_OPTION = 5;
		ALL_FIGURES_IN_MATCH = 6;
		ALL_CELLS = 7;
		ALL_TARGETS = 8;
		CASTER_OPTION = 9;
		CASTER_CELL_OPTION = 10;
		CURRENT_PHASE = 11;
	}

	// ref: com.ankamagames.arena.protocol.Expr/Types/PolymorphicOp
	enum PolymorphicOp {
		EQUALS = 1;
		FILTER = 2;
		MAP = 3;
		FLATMAP = 4;
		LENGTH = 5;
		CONTAINS = 6;
		CONS = 7;
		UNION = 8;
		ANY = 9;
		WITH_LOWEST = 10;
		WITH_HIGHEST = 11;
		WITH_LOWEST_OPTIONAL = 12;
		WITH_HIGHEST_OPTIONAL = 13;
	}

	optional Form form = 1;
	optional ConstantExpr constant = 3;
	optional VariableExpr variable = 4;
	optional FuncExpr func = 5;
	optional ApplicationExpr application = 6;
	optional ContextExpr context = 7;
	optional BuiltinExpr builtin = 8;
	optional PolymorphicOp polymorphic = 9;
	optional NullaryExpr nullary = 10;
}

// ref: com.ankamagames.arena.protocol.ExpressionBuilt
message ExpressionBuilt {
	optional ExpressionSource source = 1;
	optional int32 id = 2;
	optional Expr expression = 3;
}

// ref: com.ankamagames.arena.protocol.ExpressionsBuiltMessage
message ExpressionsBuiltMessage {
	repeated ExpressionBuilt expression = 1;
}

// ref: com.ankamagames.arena.protocol.FigureForShopTutorialRequestMessage
message FigureForShopTutorialRequestMessage {
}

// ref: com.ankamagames.arena.protocol.FigureForShopTutorialResultMessage
message FigureForShopTutorialResultMessage {
	optional FigureTypeData figure = 1;
}

// ref: com.ankamagames.arena.protocol.FigureGameData
message FigureGameData {
	repeated ArenaSpellData spell_data = 4;
	repeated ArenaAbilityData ability_data = 5;
	repeated FigureInvocationTypeData invocation_data = 6;
	repeated SpellData additionnal_spells = 7;
	repeated AbilityData additionnal_abilities = 8;
	repeated DemonicRewardData demonic_rewards = 11;
	repeated FigureManifestationData figure_manifestations = 12;
}

// ref: com.ankamagames.arena.protocol.FigureIdentification
message FigureIdentification {
	optional int32 figure_type = 1;
	optional int32 external_id = 2;
}

// ref: com.ankamagames.arena.protocol.FigureInMatchIdentificationData
message FigureInMatchIdentificationData {
	optional int32 id = 1;
	optional PlayerFigureData player_figure = 2;
	optional int32 external_id = 3;
}

// ref: com.ankamagames.arena.protocol.FigureInvocationTypeData
message FigureInvocationTypeData {
	optional InvocationIds id = 1;
	optional InvocationKind invocation_kind = 2;
	optional int32 life_points = 3;
	optional int32 action_points = 4;
	optional int32 movement_points = 5;
	repeated int32 spell_ids = 6;
	repeated int32 ability_ids = 7;
	repeated int32 tag_ids = 8;
}

// ref: com.ankamagames.arena.protocol.FigureManifestationData
message FigureManifestationData {
	optional FigureManifestation figure_manifestation = 1;
	repeated int32 figure_ids = 2;
}

// ref: com.ankamagames.arena.protocol.FigureMovementRequestMessage
message FigureMovementRequestMessage {
	optional PhaseInfoData phase_info = 1;
	repeated CoordinatesData path = 2;
}

// ref: com.ankamagames.arena.protocol.FigurePlayDuration
message FigurePlayDuration {
	optional int32 figure_type_id = 1;
	optional int32 seconds = 2;
}

// ref: com.ankamagames.arena.protocol.FigureSuccess
message FigureSuccess {
	optional int32 match_definition = 1;
	optional int32 figure_type = 2;
}

// ref: com.ankamagames.arena.protocol.FigureWithTagCountCriterionDetails
message FigureWithTagCountCriterionDetails {
	optional FigureTag figure_tag = 1;
	optional IntegerComparison comparison = 2;
}

// ref: com.ankamagames.arena.protocol.FirstCastInPhaseCriterionDetails
message FirstCastInPhaseCriterionDetails {
	optional int32 spell_id = 1;
}

// ref: com.ankamagames.arena.protocol.ForceCollectionUpdateOnLobbyMessage
message ForceCollectionUpdateOnLobbyMessage {
}

// ref: com.ankamagames.arena.protocol.ForceDiceActionDetails
message ForceDiceActionDetails {
	optional int32 fig_external_id = 1;
	optional DieRollType roll_type = 2;
	optional ArenaDieSide value = 3;
}

// ref: com.ankamagames.arena.protocol.ForceStrainRollActionDetails
message ForceStrainRollActionDetails {
	optional Side side = 1;
	optional ArenaDieSide left_die = 2;
	optional ArenaDieSide right_die = 3;
}

// ref: com.ankamagames.arena.protocol.FriendlyMatchProposalMessage
message FriendlyMatchProposalMessage {
	optional string nickname = 1;
}

// ref: com.ankamagames.arena.protocol.FriendlyRequestParameters
message FriendlyRequestParameters {
	optional string nickname = 1;
}

// ref: com.ankamagames.arena.protocol.FuncExpr
message FuncExpr {
	optional string var_name = 1;
	optional Expr body = 2;
}

// ref: com.ankamagames.arena.protocol.GameDataMessage
message GameDataMessage {
	optional ArenaGameData game_data = 1;
}

// ref: com.ankamagames.arena.protocol.GameDataWithFigureGameDataMessage
message GameDataWithFigureGameDataMessage {
	optional ArenaGameData game_data = 1;
	optional FigureGameData figure_game_data = 2;
}

// ref: com.ankamagames.arena.protocol.GetAchievementRewardMessage
message GetAchievementRewardMessage {
	optional AchievementIds achievement_id = 1;
}

// ref: com.ankamagames.arena.protocol.GetQuestRewardMessage
message GetQuestRewardMessage {
}

// ref: com.ankamagames.arena.protocol.GetRewardAndEndMeleeTournamentRequest
message GetRewardAndEndMeleeTournamentRequest {
}

// ref: com.ankamagames.arena.protocol.GgStealEffect
message GgStealEffect {
	optional int32 value = 1;
}

// ref: com.ankamagames.arena.protocol.HasAbilityCriterionDetails
message HasAbilityCriterionDetails {
	optional AbilityIds ability_id = 1;
	optional AbilityIds from_ability_source_id = 2;
}

// ref: com.ankamagames.arena.protocol.HasAdjacentAllyWithAbilityCriterionDetails
message HasAdjacentAllyWithAbilityCriterionDetails {
	optional AbilityIds ability_id = 1;
}

// ref: com.ankamagames.arena.protocol.HasAdjacentInvocationCountCriterionDetails
message HasAdjacentInvocationCountCriterionDetails {
	optional InvocationIds invocation = 1;
	optional IntegerComparison comparison = 2;
}

// ref: com.ankamagames.arena.protocol.HasAdjacentManifestationCriterionDetails
message HasAdjacentManifestationCriterionDetails {
	optional FigureManifestation figure_manifestation = 1;
}

// ref: com.ankamagames.arena.protocol.HasAlliesCountCriterionDetails
message HasAlliesCountCriterionDetails {
	optional IntegerComparison comparison = 1;
}

// ref: com.ankamagames.arena.protocol.HasAlreadyBeenHitByFigureWithTagCriterionDetails
message HasAlreadyBeenHitByFigureWithTagCriterionDetails {
	optional FigureTag figure_tag = 1;
}

// ref: com.ankamagames.arena.protocol.HasAlreadyUndergoEffectThisCastCriterionDetails
message HasAlreadyUndergoEffectThisCastCriterionDetails {
	optional EffectType effect_type = 1;
}

// ref: com.ankamagames.arena.protocol.HasAttributeCriterionDetails
message HasAttributeCriterionDetails {
	optional Attribute attribute = 1;
	optional IntegerComparison comparison = 2;
}

// ref: com.ankamagames.arena.protocol.HasAttributeModificationFromAbilityCriterionDetails
message HasAttributeModificationFromAbilityCriterionDetails {
	optional Attribute attribute = 1;
	optional AbilityIds ability_id = 2;
	optional IntegerComparison comparison = 3;
}

// ref: com.ankamagames.arena.protocol.HasDemonicRewardCriterionDetails
message HasDemonicRewardCriterionDetails {
	optional IntegerComparison comparison = 1;
}

// ref: com.ankamagames.arena.protocol.HasInjuryMarkerCountCriterionDetails
message HasInjuryMarkerCountCriterionDetails {
	optional IntegerComparison comparison = 1;
}

// ref: com.ankamagames.arena.protocol.HasKamaCountFromOpponentCriterionDetails
message HasKamaCountFromOpponentCriterionDetails {
	optional Comparator comparator = 1;
}

// ref: com.ankamagames.arena.protocol.HasKamasCriterionDetails
message HasKamasCriterionDetails {
	optional IntegerComparison comparison = 1;
}

// ref: com.ankamagames.arena.protocol.HasLevelCriterionDetails
message HasLevelCriterionDetails {
	optional IntegerComparison comparison = 1;
}

// ref: com.ankamagames.arena.protocol.HasRelativeLevelCriterionDetails
message HasRelativeLevelCriterionDetails {
	optional SuperlativeComparison superlative_comparison = 1;
}

// ref: com.ankamagames.arena.protocol.HasTagCriterionDetails
message HasTagCriterionDetails {
	optional FigureTag figure_tag = 1;
}

// ref: com.ankamagames.arena.protocol.HasTargetTypeCriterionDetails
message HasTargetTypeCriterionDetails {
	optional TargetType target_type = 1;
}

// ref: com.ankamagames.arena.protocol.HasTokenCountCriterionDetails
message HasTokenCountCriterionDetails {
	optional Attribute token_type = 1;
	optional IntegerComparison comparison = 2;
}

// ref: com.ankamagames.arena.protocol.HeadsOrTailsDetails
message HeadsOrTailsDetails {
	optional int32 figure_id = 1;
	optional HeadsOrTailsResult result = 2;
}

// ref: com.ankamagames.arena.protocol.HeadsOrTailsEffect
message HeadsOrTailsEffect {
	repeated SpellEffect heads_effects = 1;
	repeated SpellEffect tails_effects = 2;
}

// ref: com.ankamagames.arena.protocol.HealActionDetails
message HealActionDetails {
	optional int32 fig_external_id = 1;
	optional int32 value = 2;
}

// ref: com.ankamagames.arena.protocol.IceTokenMessage
message IceTokenMessage {
	optional string token = 1;
	optional bool error = 2;
	optional double expiration_date = 3;
}

// ref: com.ankamagames.arena.protocol.IceTokenRequestMessage
message IceTokenRequestMessage {
	optional string country = 1;
	optional string currency = 2;
	optional string payment_mode = 3;
	optional string partner_id = 4;
}

// ref: com.ankamagames.arena.protocol.InformationEntry
message InformationEntry {
	optional Side side = 1;
	optional PlayerInformationData data = 2;
	optional int32 rank_difference = 3;
	repeated Reward rewards = 4;
	optional bool league_change = 5;
}

// ref: com.ankamagames.arena.protocol.IntActionDetails
message IntActionDetails {
	optional int32 value = 1;
}

// ref: com.ankamagames.arena.protocol.IntAtom
message IntAtom {
	optional int32 int_value = 1;
}

// ref: com.ankamagames.arena.protocol.IntegerComparison
message IntegerComparison {
	optional int32 value = 2;
	optional Comparator comparator = 3;
}

// ref: com.ankamagames.arena.protocol.IsAtDistanceCriterionDetails
message IsAtDistanceCriterionDetails {
	optional IntegerComparison comparison = 1;
	optional DistanceCriterionMode mode = 2;
}

// ref: com.ankamagames.arena.protocol.IsFigAtDistanceOfOtherFig
message IsFigAtDistanceOfOtherFig {
	optional int32 fig_external_id1 = 1;
	optional int32 fig_external_id2 = 2;
	optional int32 distance = 3;
}

// ref: com.ankamagames.arena.protocol.IsFigDeadDetails
message IsFigDeadDetails {
	optional int32 fig_external_id = 1;
}

// ref: com.ankamagames.arena.protocol.IsFigOnCellDetails
message IsFigOnCellDetails {
	optional int32 fig_external_id = 1;
	optional int32 x = 2;
	optional int32 y = 3;
}

// ref: com.ankamagames.arena.protocol.IsInvocationOfKindCriterionDetails
message IsInvocationOfKindCriterionDetails {
	optional InvocationKind expected = 1;
}

// ref: com.ankamagames.arena.protocol.IsInvocationOfTypeCriterionDetails
message IsInvocationOfTypeCriterionDetails {
	optional InvocationIds expected = 1;
}

// ref: com.ankamagames.arena.protocol.IsObjectiveInStateDetails
message IsObjectiveInStateDetails {
	optional int32 objective_id = 1;
	optional ObjectiveState state = 2;
}

// ref: com.ankamagames.arena.protocol.IsPhaseOwnedByExternalIdDetail
message IsPhaseOwnedByExternalIdDetail {
	optional int32 fig_external_id = 1;
}

// ref: com.ankamagames.arena.protocol.IsPhaseOwnedBySideDetails
message IsPhaseOwnedBySideDetails {
	optional Side side = 1;
}

// ref: com.ankamagames.arena.protocol.KamaModificationEffect
message KamaModificationEffect {
	optional Expr value_expr = 1;
	optional bool opposite_side = 2;
}

// ref: com.ankamagames.arena.protocol.KamaPickUpEffect
message KamaPickUpEffect {
	optional int32 value = 1;
}

// ref: com.ankamagames.arena.protocol.KamaRemovalEffect
message KamaRemovalEffect {
	optional int32 value = 1;
}

// ref: com.ankamagames.arena.protocol.KamaStealEffect
message KamaStealEffect {
	optional int32 value = 1;
	optional bool opposite_side = 2;
}

// ref: com.ankamagames.arena.protocol.KrozCreditMenuTutorialsFailureMessage
message KrozCreditMenuTutorialsFailureMessage {
}

// ref: com.ankamagames.arena.protocol.KrozCreditMenuTutorialsSuccessMessage
message KrozCreditMenuTutorialsSuccessMessage {
}

// ref: com.ankamagames.arena.protocol.KrozRewardData
message KrozRewardData {
	repeated TournamentKrozRewardData tournament_rewards = 1;
	repeated ConsecutiveVictoriesKrozRewardData consecutive_victories_rewards = 2;
	repeated RatingStepKrozRewardData rating_step_rewards = 3;
	optional VictoryRewardData victory_reward_data = 4;
}

// ref: com.ankamagames.arena.protocol.Ladder
message Ladder {
	repeated League leagues = 1;
}

// ref: com.ankamagames.arena.protocol.League
message League {
	optional int32 league_id = 1;
	optional int32 min_point = 2;
	optional int32 max_point = 3;
	optional LeagueType league_type = 4;
	optional int32 league_season_reward = 5;
	optional int32 life_time_rewards = 6;
}

// ref: com.ankamagames.arena.protocol.LeagueDataInformationMessage
message LeagueDataInformationMessage {
	// ref: com.ankamagames.arena.protocol.LeagueDataInformationMessage/Types/LeagueData
	message LeagueData {
		optional LeagueType type = 1;
		optional int32 points = 2;
	}

	repeated LeagueData leagues = 1;
}

// ref: com.ankamagames.arena.protocol.LifeModificationDetails
message LifeModificationDetails {
	optional Element element = 1;
}

// ref: com.ankamagames.arena.protocol.ManifestationChangeDetails
message ManifestationChangeDetails {
	optional int32 figure_id = 1;
	optional int64 old_manifestation_id = 2;
	optional int64 new_manifestation_id = 3;
}

// ref: com.ankamagames.arena.protocol.MatchDefinition
message MatchDefinition {
	optional int32 id = 1;
	repeated int32 available_boards = 2;
	repeated int32 playable_figures_type = 3;
	optional int32 team_composition_contraints_id = 6;
	optional int32 rules_data_id = 7;
	optional MatchType match_type = 8;
	optional VictoryType victory_type = 9;
	repeated int32 objectives = 10;
	optional int32 winning_objective = 11;
	repeated FigureIdentification forced_player_team = 12;
	repeated FigureIdentification forced_iateam = 13;
	optional int32 next_match_id = 14;
	optional SkipPhaseConfiguration skip_phase_config = 15;
	optional int32 accessibility_predicate_id = 16;
	optional Region region = 17;
	optional bool boss = 18;
	optional DemonicRewardIdList available_demonic_rewards = 19;
	optional int32 unlocked_figure_id = 20;
	repeated int32 variables = 21;
}

// ref: com.ankamagames.arena.protocol.MatchEndDetails
message MatchEndDetails {
	optional int32 duration_in_seconds = 1;
	optional Side winner = 2;
	optional bool is_surrender = 3;
}

// ref: com.ankamagames.arena.protocol.MatchInformationMessage
message MatchInformationMessage {
	// ref: com.ankamagames.arena.protocol.MatchInformationMessage/Types/FigureStateData
	message FigureStateData {
		optional int32 id = 1;
		repeated EffectData effects = 2;
	}

	// ref: com.ankamagames.arena.protocol.MatchInformationMessage/Types/MatchResumptionData
	message MatchResumptionData {
		repeated EffectGroupData event_groups = 1;
		optional int32 current_phase_remaining_time = 2;
	}

	optional int32 id = 1;
	optional MatchType type = 2;
	optional int32 round = 3;
	optional Side player_side = 4;
	optional int32 board_id = 5;
	repeated ArenaTeamInMatchData teams = 7;
	optional TimelineData timeline = 8;
	optional MatchResumptionData resumption_data = 9;
	optional int32 match_definition_id = 10;
	optional MatchSubType sub_type = 11;
}

// ref: com.ankamagames.arena.protocol.MatchPlayersInformationMessage
message MatchPlayersInformationMessage {
	repeated InformationEntry information = 1;
}

// ref: com.ankamagames.arena.protocol.MatchRequestClosedMessage
message MatchRequestClosedMessage {
	// ref: com.ankamagames.arena.protocol.MatchRequestClosedMessage/Types/Reason
	enum Reason {
		BY_CLIENT = 0;
		BY_SERVER = 1;
	}

	optional MatchType match_type = 1;
	optional Reason reason = 2;
	optional string closed_by = 3;
	optional string opponent = 4;
}

// ref: com.ankamagames.arena.protocol.MatchRequestErrorMessage
message MatchRequestErrorMessage {
	// ref: com.ankamagames.arena.protocol.MatchRequestErrorMessage/Types/ErrorType
	enum ErrorType {
		ARENA_TEAM_NOT_FOUND = 2;
		INVALID_ARENA_TEAM = 3;
		ALREADY_IN_MATCH = 4;
		NO_OPPONENT_ARENA_TEAM = 5;
		INVALID_OPPONENT_ARENA_TEAM = 6;
		UNKNOWN_OPPONENT = 7;
		OPPONENT_ALREADY_IN_MATCH = 8;
		OPPONENT_IS_BUSY = 9;
		OPPONENT_IS_YOURSELF = 10;
		MATCH_REQUESTS_CLOSED = 11;
		INVALID_MATCH_REQUEST = 12;
		UNKNOWN_ERROR = 13;
		NOT_IN_TOURNAMENT = 14;
		NO_SERVER_MATCH_AVAILABLE = 15;
		JOIN_SERVER_MATCH_TIME_OUT = 16;
		NO_MATCH_FOR_PLAYER = 17;
		ALL_MATCH_DONE_INT_TOURNAMENT = 18;
	}

	optional MatchType type = 1;
	optional ErrorType error = 2;
	optional FriendlyRequestParameters friendly_request_parameters = 3;
}

// ref: com.ankamagames.arena.protocol.MatchRequestMessage
message MatchRequestMessage {
	optional MatchType type = 1;
	optional int32 team_id = 2;
	optional FriendlyRequestParameters friendly_request_parameters = 3;
	optional bool is_response = 4;
	optional int32 match_def_id = 5;
	repeated int32 custom_team = 6;
	optional MatchSubType sub_type = 7;
}

// ref: com.ankamagames.arena.protocol.MatchResumeErrorMessage
message MatchResumeErrorMessage {
}

// ref: com.ankamagames.arena.protocol.MatchServerConnectionRequestMessage
message MatchServerConnectionRequestMessage {
}

// ref: com.ankamagames.arena.protocol.MatchServerDisconnectedMessage
message MatchServerDisconnectedMessage {
}

// ref: com.ankamagames.arena.protocol.MatchTransactionErrorMessage
message MatchTransactionErrorMessage {
}

// ref: com.ankamagames.arena.protocol.MeleeFigureData
message MeleeFigureData {
	optional int32 id = 1;
	optional int32 tournament_id = 2;
	optional int32 figure_type = 3;
	optional int32 position = 4;
}

// ref: com.ankamagames.arena.protocol.MeleeRewardFigInfo
message MeleeRewardFigInfo {
	optional int32 id = 1;
	optional int32 weight = 2;
}

// ref: com.ankamagames.arena.protocol.MeleeTournamentData
message MeleeTournamentData {
	optional int32 id = 1;
	optional int32 victories = 2;
	optional int32 defeats = 3;
	optional double rating = 4;
	optional uint64 start_date = 5;
	repeated MeleeFigureData figures = 6;
	optional bool has_rewards = 7;
}

// ref: com.ankamagames.arena.protocol.MeleeTournamentMessage
message MeleeTournamentMessage {
	optional MeleeTournamentData melee = 1;
}

// ref: com.ankamagames.arena.protocol.MeleeTournamentReward
message MeleeTournamentReward {
	optional int32 bonus_four_match = 1;
	optional int32 fixed_reward_per_victory = 2;
	optional int32 random_reward_per_victory = 3;
	optional int32 kroz_reward_weight = 4;
	optional int32 frag_reward_weight = 5;
	optional int32 fig_reward_weight = 6;
	optional int32 kroz_reward_value = 7;
	optional int32 frag_reward_value = 8;
	optional int32 fig_reward_value = 9;
	repeated MeleeRewardFigInfo fig_infos = 10;
}

// ref: com.ankamagames.arena.protocol.MeleeTournamentRewardResult
message MeleeTournamentRewardResult {
	optional int32 kroz_value = 1;
	optional int32 frag_value = 2;
	repeated int32 fig_ids = 3;
}

// ref: com.ankamagames.arena.protocol.MeleeTournamentTeamMessage
message MeleeTournamentTeamMessage {
	optional int32 account_id = 1;
	repeated MeleeFigureData figures = 2;
}

// ref: com.ankamagames.arena.protocol.MenuTutorials
message MenuTutorials {
	optional int32 account_id = 1;
	optional int32 shop_tuto_state = 2;
	optional int32 collection_tuto_state = 3;
	optional int32 pve_tuto_state = 4;
	optional int32 melee_tuto_state = 5;
}

// ref: com.ankamagames.arena.protocol.MuteNotificationMessage
message MuteNotificationMessage {
	optional string nickname = 1;
	optional double until_date = 2;
}

// ref: com.ankamagames.arena.protocol.MuteRequestMessage
message MuteRequestMessage {
	optional string nickname = 1;
	optional int32 duration = 2;
}

// ref: com.ankamagames.arena.protocol.NewsClickedMessage
message NewsClickedMessage {
	optional string news_guid = 1;
}

// ref: com.ankamagames.arena.protocol.NotCriterionDetails
message NotCriterionDetails {
	optional CriterionData criterion = 1;
}

// ref: com.ankamagames.arena.protocol.ObjectIdDetails
message ObjectIdDetails {
	optional int32 id = 1;
}

// ref: com.ankamagames.arena.protocol.ObjectiveAction
message ObjectiveAction {
	optional ObjectiveActionType objective_action_type = 1;
	optional SpawnFigureActionDetails spawn_figure_action_details = 2;
	optional ForceDiceActionDetails force_dice_action_details = 3;
	optional HealActionDetails heal_action_details = 4;
	optional IntActionDetails int_action_details = 5;
	optional ResetDemonicRewardStackActionDetails reset_demonic_reward_details = 6;
	optional ForceStrainRollActionDetails force_strain_roll_action_details = 7;
}

// ref: com.ankamagames.arena.protocol.ObjectiveData
message ObjectiveData {
	optional int32 id = 1;
	repeated ObjectiveTrigger run_trigger = 2;
	repeated ObjectiveTrigger success_trigger = 3;
	repeated ObjectiveTrigger fail_trigger = 4;
	repeated ObjectiveAction run_actions = 5;
	repeated ObjectiveAction success_actions = 6;
	repeated ObjectiveAction fail_actions = 7;
	optional bool is_restartable = 8;
}

// ref: com.ankamagames.arena.protocol.ObjectiveDetails
message ObjectiveDetails {
	optional int32 id = 1;
	optional ObjectiveState state = 2;
}

// ref: com.ankamagames.arena.protocol.ObjectivesCriterionData
message ObjectivesCriterionData {
	optional ObjectivesCriterionType type = 1;
	optional IsFigOnCellDetails is_fig_on_cell_criterion = 2;
	optional IsFigAtDistanceOfOtherFig is_fig_at_distance_of_other_fig_criterion = 3;
	optional IsObjectiveInStateDetails is_objective_in_state_criterion = 4;
	optional IsFigDeadDetails is_fig_dead_criterion = 5;
	optional IsPhaseOwnedBySideDetails is_phase_owned_by_side_criterion = 6;
	optional IsPhaseOwnedByExternalIdDetail is_phase_owned_by_external_id_criterion = 7;
}

// ref: com.ankamagames.arena.protocol.ObjectiveTrigger
message ObjectiveTrigger {
	optional TriggerType trigger_type = 1;
	optional int32 criterion_id = 5;
}

// ref: com.ankamagames.arena.protocol.OngoingMatchNotificationMessage
message OngoingMatchNotificationMessage {
	optional MatchType match_type = 1;
}

// ref: com.ankamagames.arena.protocol.OpponentJoinedMatchMessage
message OpponentJoinedMatchMessage {
}

// ref: com.ankamagames.arena.protocol.OpponentLeftMatchMessage
message OpponentLeftMatchMessage {
}

// ref: com.ankamagames.arena.protocol.OrCriterionDetails
message OrCriterionDetails {
	repeated CriterionData criteria_list = 2;
}

// ref: com.ankamagames.arena.protocol.PawnRemovalDetails
message PawnRemovalDetails {
	optional PawnType type = 1;
	optional CoordinatesData cell = 2;
}

// ref: com.ankamagames.arena.protocol.PhaseChangeDetails
message PhaseChangeDetails {
	optional int32 duration = 1;
	optional PhaseInfoData phase_info = 2;
}

// ref: com.ankamagames.arena.protocol.PhaseDurationFactor
message PhaseDurationFactor {
	optional MatchType match_type = 1;
	optional int32 factor = 2;
}

// ref: com.ankamagames.arena.protocol.PhaseInfoData
message PhaseInfoData {
	optional PhaseType phase_type = 1;
	optional int32 turn = 2;
	optional Side playing_side = 3;
	optional int32 figure_id = 4;
}

// ref: com.ankamagames.arena.protocol.PickUpKamaMessage
message PickUpKamaMessage {
	optional PhaseInfoData phase_info = 1;
}

// ref: com.ankamagames.arena.protocol.PlacementData
message PlacementData {
	optional int32 figure_id = 1;
	optional CoordinatesData position = 2;
}

// ref: com.ankamagames.arena.protocol.PlacementMessage
message PlacementMessage {
	optional PhaseInfoData phase_info = 1;
	repeated PlacementData placements = 2;
}

// ref: com.ankamagames.arena.protocol.PlayerAnalyticsData
message PlayerAnalyticsData {
	optional int32 victories = 1;
	optional int32 defeats = 2;
	optional int32 surrenders = 3;
	optional int32 consecutive_victories = 4;
	optional int32 consecutive_defeats = 5;
	optional int32 random_matches = 6;
	optional int32 friendly_matches = 7;
	optional int32 tournament_matches = 8;
	optional int32 melee_victories = 9;
	optional int32 melee_defeats = 10;
	optional int32 melee_surrenders = 11;
	optional int32 melee_max_victory = 12;
}

// ref: com.ankamagames.arena.protocol.PlayerFigureSuccess
message PlayerFigureSuccess {
	repeated FigureSuccess figure_success = 1;
}

// ref: com.ankamagames.arena.protocol.PlayerInformationData
message PlayerInformationData {
	optional string nickname = 1;
	optional PlayerAnalyticsData stats = 2;
	optional PlayerRatingData rating = 3;
	optional string account_type = 4;
}

// ref: com.ankamagames.arena.protocol.PlayerPreferencesData
message PlayerPreferencesData {
	optional string language = 1;
	optional bool audio_enabled = 2;
	optional bool music_enabled = 3;
	optional bool fx_enabled = 4;
	optional double music_volume = 5;
	optional double fx_volume = 6;
}

// ref: com.ankamagames.arena.protocol.PlayerPreferencesUpdateMessage
message PlayerPreferencesUpdateMessage {
	optional PlayerPreferencesData preferences = 1;
}

// ref: com.ankamagames.arena.protocol.PlayerRatingData
message PlayerRatingData {
	optional double points = 1;
	optional double max_points = 2;
	optional int32 rank = 3;
}

// ref: com.ankamagames.arena.protocol.PositionChangeDetails
message PositionChangeDetails {
	optional int32 figure_id = 1;
	repeated CoordinatesData coordinates = 2;
}

// ref: com.ankamagames.arena.protocol.PowerModifierEffect
message PowerModifierEffect {
	optional Expr value_expr = 10;
}

// ref: com.ankamagames.arena.protocol.PurchaseDemonicRewardMessage
message PurchaseDemonicRewardMessage {
	optional PhaseInfoData phase_info = 1;
	optional DemonicRewardStackReference from_stack = 2;
}

// ref: com.ankamagames.arena.protocol.PurchaseGgMessage
message PurchaseGgMessage {
	optional PhaseInfoData phase_info = 1;
}

// ref: com.ankamagames.arena.protocol.PushPullEffect
message PushPullEffect {
	optional PushPullType type = 1;
	optional int32 distance = 2;
}

// ref: com.ankamagames.arena.protocol.Quest
message Quest {
	optional int32 id = 1;
	optional int32 value = 2;
	optional int32 state = 3;
	optional int64 start_time = 4;
	optional int32 x_constraintindex = 5;
}

// ref: com.ankamagames.arena.protocol.QuestData
message QuestData {
	optional int32 id = 1;
	optional QuestIds quest_id = 2;
	optional QuestType quest_type = 3;
	repeated QuestXConstraint x_constraint = 4;
	repeated FigureTag tags = 5;
	repeated int32 parameters = 6;
}

// ref: com.ankamagames.arena.protocol.QuestXConstraint
message QuestXConstraint {
	optional QuestXConstraintType type = 1;
	optional int32 ceil = 2;
	optional int32 value = 3;
}

// ref: com.ankamagames.arena.protocol.RatingStepKrozRewardData
message RatingStepKrozRewardData {
	optional int32 rating = 1;
	optional int32 reward = 2;
	optional int32 repeat_every = 3;
}

// ref: com.ankamagames.arena.protocol.RequestCrossPromoMessage
message RequestCrossPromoMessage {
}

// ref: com.ankamagames.arena.protocol.RequestOutgoingMatchMessage
message RequestOutgoingMatchMessage {
}

// ref: com.ankamagames.arena.protocol.RequestUpdateCrossPromoStateMessage
message RequestUpdateCrossPromoStateMessage {
	optional int32 state = 1;
}

// ref: com.ankamagames.arena.protocol.RequestUpdateMenuTutorialsMessage
message RequestUpdateMenuTutorialsMessage {
	optional MenuTutorials menu_tutorials = 1;
}

// ref: com.ankamagames.arena.protocol.ResetDemonicRewardStackActionDetails
message ResetDemonicRewardStackActionDetails {
	optional DemonicRewardRank rank = 1;
}

// ref: com.ankamagames.arena.protocol.ResetQuestRequestMessage
message ResetQuestRequestMessage {
}

// ref: com.ankamagames.arena.protocol.ResumeMatchRequestMessage
message ResumeMatchRequestMessage {
}

// ref: com.ankamagames.arena.protocol.Reward
message Reward {
	optional RewardType type = 1;
	optional CurrencyReward kroz_reward = 2;
}

// ref: com.ankamagames.arena.protocol.RosterMessage
message RosterMessage {
	repeated int32 available_figures = 1;
}

// ref: com.ankamagames.arena.protocol.RuleData
message RuleData {
	optional int32 initial_gg_count = 1;
	optional int32 purchase_gg_action_point_cost = 2;
	optional int32 purchase_gg_kama_cost = 3;
	optional int32 pick_up_kama_action_point_cost = 4;
	optional int32 strain_die_specialization_duration = 5;
	optional int32 crate_range_bonus = 6;
	optional double tournament_subscription_cooldown = 7;
	optional double kroz_for_tournament_gain_rate = 8;
	optional double kroz_for_max_rating_gain_rate = 9;
	optional double kroz_for_consecutive_victories_gain_rate = 10;
	optional int32 demonic_reward_stack_count = 11;
	optional int32 purchase_demonic_reward_action_point_cost = 12;
	repeated DemonicRewardKamaCost purchase_demonic_reward_kama_cost = 13;
	optional int32 demonic_reward_attribution_duration = 14;
	repeated PhaseDurationFactor phase_duration_factor = 15;
	repeated FigurePlayDuration play_duration = 16;
	optional int32 id = 17;
	optional int32 strain_die_one_unallocated_die_kama_earn = 18;
	optional int32 strain_die_two_unallocated_die_kama_earn = 19;
	optional int32 crafter_pareduction = 20;
}

// ref: com.ankamagames.arena.protocol.SeasonInfoMessage
message SeasonInfoMessage {
	optional int64 next_season_date = 1;
}

// ref: com.ankamagames.arena.protocol.SeasonReward
message SeasonReward {
	optional int32 season_id = 1;
	repeated Reward rewards = 2;
	optional int64 next_season_end_date = 3;
}

// ref: com.ankamagames.arena.protocol.SecondaryTarget
message SecondaryTarget {
	optional int32 min_range = 1;
	optional int32 max_range = 2;
	optional RangeType range_type = 3;
	optional bool modifiable_range = 4;
	repeated TargetType target_types = 5;
}

// ref: com.ankamagames.arena.protocol.SimpleChatMessage
message SimpleChatMessage {
	optional PredefinedChatMessage predefined_chat_message = 1;
}

// ref: com.ankamagames.arena.protocol.SimpleSpellModifier
message SimpleSpellModifier {
	optional SimpleSpellModifierType type = 1;
	optional Expr predicate = 2;
}

// ref: com.ankamagames.arena.protocol.SingleFigureCriterionApplicationDetails
message SingleFigureCriterionApplicationDetails {
	optional SingleFigureCriterionData criterion = 1;
}

// ref: com.ankamagames.arena.protocol.SingleFigureCriterionData
message SingleFigureCriterionData {
	optional SingleFigureCriterionType type = 1;
	optional HasAttributeModificationFromAbilityCriterionDetails has_attribute_modification_from_ability_criterion = 3;
	optional HasAdjacentInvocationCountCriterionDetails has_adjacent_invocation_count_criterion = 4;
	optional FigureWithTagCountCriterionDetails figure_with_tag_count_criterion = 5;
	optional HasLevelCriterionDetails has_level_criterion = 6;
	optional HasTagCriterionDetails has_tag_criterion = 7;
	optional HasInjuryMarkerCountCriterionDetails has_injury_marker_count_criterion = 8;
	optional HasAttributeCriterionDetails has_attribute_criterion = 11;
	optional IsInvocationOfKindCriterionDetails is_invocation_of_kind_criterion = 12;
	optional IsInvocationOfTypeCriterionDetails is_invocation_of_type_criterion = 13;
	optional HasAbilityCriterionDetails has_ability_criterion = 14;
	optional FirstCastInPhaseCriterionDetails first_cast_in_phase_criterion = 15;
	optional HasKamasCriterionDetails has_kama_criterion = 16;
	optional HasTokenCountCriterionDetails has_token_count_criterion = 17;
	optional HasAlreadyBeenHitByFigureWithTagCriterionDetails has_already_been_hit_by_figure_criterion = 18;
	optional HasAdjacentManifestationCriterionDetails has_adjacent_manifestation_criterion = 19;
	optional HasAdjacentAllyWithAbilityCriterionDetails has_adjacent_ally_with_ability_criterion = 20;
	optional HasRelativeLevelCriterionDetails has_relative_level_criterion = 21;
	optional HasKamaCountFromOpponentCriterionDetails has_kama_count_from_opponent_criterion = 22;
	optional HasAlreadyUndergoEffectThisCastCriterionDetails has_already_undergo_effect_this_cast_criterion = 23;
	optional HasAlliesCountCriterionDetails has_allies_count_criterion = 24;
	optional HasDemonicRewardCriterionDetails has_demonic_reward_criterion = 25;
}

// ref: com.ankamagames.arena.protocol.SingleTarget
message SingleTarget {
	repeated TargetType target_types = 1;
}

// ref: com.ankamagames.arena.protocol.SkipPhaseConfiguration
message SkipPhaseConfiguration {
	optional bool skip_observation = 1;
	optional bool skip_transition = 2;
	optional bool skip_placement = 3;
}

// ref: com.ankamagames.arena.protocol.SkipPhaseMessage
message SkipPhaseMessage {
	optional PhaseInfoData phase_info = 1;
}

// ref: com.ankamagames.arena.protocol.SpawnDetails
message SpawnDetails {
	optional int32 figure_type = 1;
	optional int32 figure_in_match_id = 2;
	optional Side side = 3;
	optional PlayerFigureData player_figure_data = 4;
	optional int32 external_id = 5;
}

// ref: com.ankamagames.arena.protocol.SpawnFigureActionDetails
message SpawnFigureActionDetails {
	optional int32 figure_id = 1;
	optional int32 x = 2;
	optional int32 y = 3;
	optional Side side = 4;
	optional int32 external_id = 5;
	repeated CoordinatesData alternative_coordinates = 6;
}

// ref: com.ankamagames.arena.protocol.SpellCastDetails
message SpellCastDetails {
	optional int32 figure_id = 1;
	optional int32 spell_id = 2;
	optional CoordinatesData target = 3;
	optional CoordinatesData secondary_target = 4;
	optional TriggerType trigger_type = 5;
}

// ref: com.ankamagames.arena.protocol.SpellCastParameterData
message SpellCastParameterData {
	optional CoordinatesData target = 1;
	optional CoordinatesData secondary_target = 2;
	optional int32 choice_index = 3;
}

// ref: com.ankamagames.arena.protocol.SpellCastRequestMessage
message SpellCastRequestMessage {
	optional PhaseInfoData phase_info = 1;
	optional int32 spell_id = 2;
	optional CoordinatesData target = 3;
	optional CoordinatesData secondary_target = 5;
	optional int32 choice_index = 6;
}

// ref: com.ankamagames.arena.protocol.SpellChangeDetails
message SpellChangeDetails {
	optional int32 figure_id = 1;
	optional int32 spell_id = 2;
	optional bool usable = 3;
	optional EffectDuration duration = 4;
}

// ref: com.ankamagames.arena.protocol.SpellChangeEffect
message SpellChangeEffect {
	optional AdditionnalSpellIds spell_id = 1;
	optional EffectSourceData source = 2;
	optional EffectDuration duration = 3;
	optional bool gain = 4;
}

// ref: com.ankamagames.arena.protocol.SpellEffect
message SpellEffect {
	optional SpellEffectType type = 1;
	optional Expr predicate = 2;
	optional SpellEffectApplicationType application_type = 3;
	optional bool with_caster_source = 4;
	optional AttributeEffect attribute_effect = 5;
	optional PushPullEffect push_pull_effect = 6;
	optional SummonEffect summon_effect = 7;
	optional AbilityEffect ability_effect = 8;
	optional HeadsOrTailsEffect heads_or_tails_effect = 9;
	optional ActivateSpellEffect activate_spell_effect = 10;
	optional PowerModifierEffect power_modifier_effect = 11;
	optional AbilitySyncEffect ability_sync_effect = 12;
	optional KamaModificationEffect kama_modification_effect = 13;
	optional GgStealEffect gg_steal_effect = 14;
	optional DemonicRewardGainEffect demonic_reward_gain_effect = 15;
	optional ChoiceEffect choice_effect = 16;
	optional SpellChangeEffect spell_change_effect = 17;
	optional TeleportEffect teleport_effect = 18;
	optional KamaStealEffect kama_steal_effect = 19;
	optional KamaPickUpEffect kama_pick_up_effect = 20;
	optional KamaRemovalEffect kama_removal_effect = 21;
	optional int32 tag = 30;
}

// ref: com.ankamagames.arena.protocol.SpellModification
message SpellModification {
	repeated Element element = 1;
	repeated SimpleSpellModifierType modifier = 2;
	optional SpellModificationUse use = 3;
}

// ref: com.ankamagames.arena.protocol.SpellReference
message SpellReference {
	optional AdditionnalSpellIds additional_spell_id = 1;
	optional int32 catalog_spell_id = 2;
}

// ref: com.ankamagames.arena.protocol.SpellTrigger
message SpellTrigger {
	repeated TriggerType trigger_types = 1 [packed=true];
	optional AdditionnalSpellIds additional_spell_id = 2;
	optional TriggerExecution trigger_execution = 3;
	optional Expr predicate = 4;
	optional Expr target_filter = 5;
}

// ref: com.ankamagames.arena.protocol.SpellUsageDetails
message SpellUsageDetails {
	optional int32 figure_id = 1;
	optional int32 spell_id = 2;
	optional bool usable = 3;
	optional int32 target_figure_id = 4;
}

// ref: com.ankamagames.arena.protocol.StartMeleeTournamentRequestMessage
message StartMeleeTournamentRequestMessage {
}

// ref: com.ankamagames.arena.protocol.StartTournamentRequestMessage
message StartTournamentRequestMessage {
}

// ref: com.ankamagames.arena.protocol.StatsNotificationMessage
message StatsNotificationMessage {
	optional int32 client_count = 1;
	optional int32 match_count = 2;
}

// ref: com.ankamagames.arena.protocol.StatsRequestMessage
message StatsRequestMessage {
}

// ref: com.ankamagames.arena.protocol.SteamCheckAppOwnershipRequestMessage
message SteamCheckAppOwnershipRequestMessage {
	optional uint64 steam_id = 1;
}

// ref: com.ankamagames.arena.protocol.StrainDieAllocationDetails
message StrainDieAllocationDetails {
	optional int32 die_index = 1;
	optional int32 figure_id = 2;
}

// ref: com.ankamagames.arena.protocol.StrainDieAllocationMessage
message StrainDieAllocationMessage {
	optional PhaseInfoData phase_info = 1;
	optional StrainDieAllocationDetails details = 2;
}

// ref: com.ankamagames.arena.protocol.StrainDieSpecializationDetails
message StrainDieSpecializationDetails {
	optional int32 die_index = 1;
	optional ArenaDieSide die_side = 2;
}

// ref: com.ankamagames.arena.protocol.StrainDieSpecializationMessage
message StrainDieSpecializationMessage {
	optional PhaseInfoData phase_info = 1;
	optional StrainDieSpecializationDetails details = 2;
}

// ref: com.ankamagames.arena.protocol.StrainRollCompletionDetails
message StrainRollCompletionDetails {
	repeated ArenaDieSide die = 1;
}

// ref: com.ankamagames.arena.protocol.StrainRollDetails
message StrainRollDetails {
	repeated ArenaDieSide die = 1;
}

// ref: com.ankamagames.arena.protocol.SummonDetails
message SummonDetails {
	optional int32 figure_id = 1;
	optional int32 invocation_type = 2;
	optional int32 invocation_in_match_id = 3;
}

// ref: com.ankamagames.arena.protocol.SummonEffect
message SummonEffect {
	optional InvocationIds invocation_id = 1;
	optional int32 maximum_count = 2;
	optional bool on_secondary_target = 3;
}

// ref: com.ankamagames.arena.protocol.SuperlativeComparison
message SuperlativeComparison {
	optional Superlative superlative = 1;
	repeated TargetType target_types = 2;
}

// ref: com.ankamagames.arena.protocol.SurrenderMatchMessage
message SurrenderMatchMessage {
}

// ref: com.ankamagames.arena.protocol.TargetData
message TargetData {
	optional SingleTarget single_target = 1;
	optional AreaOfEffectTarget area_of_effect_target = 2;
	optional Expr predicate = 3;
}

// ref: com.ankamagames.arena.protocol.TeamCompositionConstraints
message TeamCompositionConstraints {
	optional int32 min_team_size = 1;
	optional int32 max_team_size = 2;
	optional int32 max_total_level = 3;
	optional int32 max_same_figure_occurrences = 4;
	optional int32 max_same_champion_occurrences = 5;
	optional int32 max_same_mediocre_occurrences = 6;
	optional int32 id = 7;
}

// ref: com.ankamagames.arena.protocol.TeamModificationMessage
message TeamModificationMessage {
	optional ArenaTeamData team = 1;
}

// ref: com.ankamagames.arena.protocol.TeamModificationResultMessage
message TeamModificationResultMessage {
	// ref: com.ankamagames.arena.protocol.TeamModificationResultMessage/Types/TeamModificationResult
	enum TeamModificationResult {
		MODIFICATION_VALIDATED = 1;
		UNKNOWN_TEAM = 2;
		INVALID_TEAM_COMPOSITION = 3;
		FIGURE_NOT_IN_COLLECTION = 4;
		COLLECTION_SERVICE_ERROR = 5;
		UNKNOWN_ERROR = 6;
		FIGURE_NOT_IN_ROSTER = 7;
	}

	optional TeamModificationResult modification_result = 1;
}

// ref: com.ankamagames.arena.protocol.TeamScoreDetails
message TeamScoreDetails {
	optional Side team = 1;
	optional int32 int_value = 2;
}

// ref: com.ankamagames.arena.protocol.TeleportEffect
message TeleportEffect {
	optional TeleportType type = 1;
}

// ref: com.ankamagames.arena.protocol.Term
message Term {
	optional Atom atom = 1;
	optional UnaryOp unary = 2;
	optional BinaryOp binary = 3;
}

// ref: com.ankamagames.arena.protocol.TimelineData
message TimelineData {
	optional Side playing_first = 1;
	repeated int32 figures_in_play_order = 2;
}

// ref: com.ankamagames.arena.protocol.TournamentData
message TournamentData {
	optional int32 id = 1;
	optional double start_date = 2;
	optional double end_date = 3;
	optional TournamentMatchData match = 4;
	repeated PlayerInformationData players = 5;
}

// ref: com.ankamagames.arena.protocol.TournamentDetailsRequestMessage
message TournamentDetailsRequestMessage {
	optional int32 tournament_id = 1;
}

// ref: com.ankamagames.arena.protocol.TournamentFigureData
message TournamentFigureData {
	optional int32 figure_type_id = 1;
	optional int32 pedestal_id = 2;
}

// ref: com.ankamagames.arena.protocol.TournamentKrozRewardData
message TournamentKrozRewardData {
	optional int32 round = 1;
	optional int32 reward = 2;
}

// ref: com.ankamagames.arena.protocol.TournamentListMessage
message TournamentListMessage {
	repeated TournamentData tournaments = 1;
}

// ref: com.ankamagames.arena.protocol.TournamentMatchData
message TournamentMatchData {
	optional int32 id = 1;
	optional int32 round = 2;
	optional double date = 3;
	optional TournamentTeamData winner_team = 4;
	optional TournamentTeamData looser_team = 5;
	optional int32 kroz_gain = 6;
	repeated TournamentMatchData children = 7;
}

// ref: com.ankamagames.arena.protocol.TournamentRequestErrorMessage
message TournamentRequestErrorMessage {
	// ref: com.ankamagames.arena.protocol.TournamentRequestErrorMessage/Types/ErrorType
	enum ErrorType {
		UNKNOWN_TOURNAMENT = 1;
		ALREADY_IN_TOURNAMENT = 2;
		LAST_TOURNAMENT_TOO_RECENT = 3;
		UNKNOWN_ERROR = 4;
	}

	optional ErrorType error = 1;
}

// ref: com.ankamagames.arena.protocol.TournamentStatusRequestMessage
message TournamentStatusRequestMessage {
}

// ref: com.ankamagames.arena.protocol.TournamentTeamData
message TournamentTeamData {
	optional string nickname = 1;
	repeated TournamentFigureData figures = 2;
}

// ref: com.ankamagames.arena.protocol.UnaryOp
message UnaryOp {
	// ref: com.ankamagames.arena.protocol.UnaryOp/Types/Type
	enum Type {
		NEG = 0;
	}

	optional Type type = 1;
	optional Term term = 2;
}

// ref: com.ankamagames.arena.protocol.UnseenFigureCountMessage
message UnseenFigureCountMessage {
	optional int32 count = 1;
}

// ref: com.ankamagames.arena.protocol.UpdateAchievementsMessage
message UpdateAchievementsMessage {
	repeated Achievement achievements = 1;
}

// ref: com.ankamagames.arena.protocol.UpdateCollectionMenuTutorialsStateMessage
message UpdateCollectionMenuTutorialsStateMessage {
	optional int32 collection_menu_tutorials_state = 1;
}

// ref: com.ankamagames.arena.protocol.UpdateCrossPromoMessage
message UpdateCrossPromoMessage {
	optional CrossPromo cross_promo = 1;
}

// ref: com.ankamagames.arena.protocol.UpdateFigureSuccessMessage
message UpdateFigureSuccessMessage {
	optional PlayerFigureSuccess playerfigure_success = 1;
}

// ref: com.ankamagames.arena.protocol.UpdateMeleeMenuTutorialsStateMessage
message UpdateMeleeMenuTutorialsStateMessage {
	optional int32 melee_menu_tutorials_state = 1;
}

// ref: com.ankamagames.arena.protocol.UpdatePveMenuTutorialsStateMessage
message UpdatePveMenuTutorialsStateMessage {
	optional int32 pve_menu_tutorials_state = 1;
}

// ref: com.ankamagames.arena.protocol.UpdateQuestRequestMessage
message UpdateQuestRequestMessage {
}

// ref: com.ankamagames.arena.protocol.UpdateQuestsMessage
message UpdateQuestsMessage {
	optional int32 reward_value = 1;
	repeated Quest quests = 2;
}

// ref: com.ankamagames.arena.protocol.UpdateShopMenuTutorialsStateMessage
message UpdateShopMenuTutorialsStateMessage {
	optional int32 shop_menu_tutorials_state = 1;
}

// ref: com.ankamagames.arena.protocol.VariableDefinition
message VariableDefinition {
	optional int32 id = 1;
	optional string name = 2;
	optional int32 initial_value = 3;
	optional int32 success_value = 4;
	optional bool fail = 5;
	optional bool display_checkbox = 6;
	optional VariableProperty property = 7;
}

// ref: com.ankamagames.arena.protocol.VariableExpr
message VariableExpr {
	optional string name = 1;
}

// ref: com.ankamagames.arena.protocol.VictoryRewardData
message VictoryRewardData {
	optional int32 modulo = 1;
	optional int32 reward = 2;
}

// ref: com.ankamagames.arena.protocol.WalletInformationMessage
message WalletInformationMessage {
	optional int32 kroz_count = 1;
	optional int32 ogrine_count = 2;
}

// ref: com.ankamagames.arena.protocol.WalletInformationRequestMessage
message WalletInformationRequestMessage {
}

// ref: com.ankamagames.arena.protocol.WelcomeMessage
message WelcomeMessage {
	optional ArenaGameData game_data = 1;
	repeated FigureTypeData figures = 2;
}

// ref: com.ankamagames.arena.protocol.WhoisNotificationMessage
message WhoisNotificationMessage {
	optional string nickname = 1;
	optional bool moderator = 2;
	optional bool administrator = 3;
	optional PlayerAnalyticsData analytics = 4;
	optional PlayerRatingData rating = 5;
}

// ref: com.ankamagames.arena.protocol.WhoisRequestMessage
message WhoisRequestMessage {
	optional string nickname = 1;
}
